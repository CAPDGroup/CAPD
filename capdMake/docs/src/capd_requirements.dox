/*! \page capd_requirements CAPD requirements

\section capd_requirements_linux Linux

The CAPD::DynSys uses very standard tools and libraries, only.
- \b gcc, \b g++ (must support at least C++17 standard).
- \b make, \b cmake \todo specify the lowest cmake version.

- \b pkg-config
- \b git or \b unzip (depending if you preffer to clone CAPD git repository or unzip an arvchive with stable CAPD release)
- To enable <b>multiple precision</b> support in the CAPD the libraries the libraries \b gmp and \b mpfr are required.<br/>
  One should install packages <tt>libgmp, libgmp-dev, libgmpxx, libmpfr, libmpfr-dev</tt>.
- We recommend to install [**Boost**](http://www.boost.org) library (header files and compiled libraries, e.g. package <tt>libboost1.53-all-dev</tt> or <tt>libboost-all-dev</tt>).


The CAPD package was tested on Linux distributions: Debian, Ubuntu.
Please check \ref capd_build_environment_dockerfiles to see our setup.

\section capd_requirements_windows Windows

The current version of CAPD uses automated compilation tools therefore it needs linux like shell console and selection of other tools.
We recommend to use **Windows Subsystem for Linux**

[**https://learn.microsoft.com/en-us/windows/wsl**](https://learn.microsoft.com/en-us/windows/wsl)

and within Linux console for Windows install all tools required for the Linux system.

\section capd_requirements_osx OSX
\todo Review OSX requirements

1) Install C++ compiler from Command Line Tools (it is also shipped with XCode) by doing one of the following:
- Install \b Xcode from App Store (it is quite heavy).
- It is enough to download and install <b>Command Line Tools</b> from
  <a href="http://developer.apple.com/downloads/index.action">Apple Developers</a>
 (search for "command line tools").

2) If you have an \b M1 chip (filib interval library does not support it),
   then do one of the following
   -  Use Rosetta (it is an Intel processor emulation and can slow down performance)

      - in Finder find Terminal (which should be in Applications/Utilities/),
      right mouse click on it, and choose “Get Info”.
      - Choose the “open using Rosetta” tickbox. Install Rosetta when prompted if you do not have one.
      - Quit Terminal.

      <i> You can choose to have two versions of Terminal.
         One running with Rosetta and the other to run without it.
         To do so simply duplicate the Terminal application,
         and choose one of the terminal application to be under Rosetta and the other without it.
         Use the Rosetta terminal for the below installation steps. </i>

   - (EXPERIMENTAL) Use <tt>--without-filib</tt> switch when calling <tt>configure</tt> script.
     It will use internal CAPD interval package instead of filib library.
     It is not yet well tested. It is good for development.

   If you have an Intel mac, ignore this step.

3) Install \b Homebrew

   <i>For OSX you can find a few package managers,
   we recommend <a href="http://brew.sh/"><b>Homebrew</b></a>.</i>

   - In Terminal paste and execute:
     \code{.sh}
     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)”
     \endcode
     (see https://brew.sh for details.)

   - Homebrew can check if the installation is correct:
     \code{.sh}
     brew doctor
     \endcode

4) Install \b GNU \b tools and libraries, that CAPD depends on.

   -  In Terminal execute one by one the following commands:
      \code{.sh}
      brew install boost
      brew install make
      brew install autoconf
      brew install pkg-config
      \endcode

   - To use multiple precision in CAPD
     \code{.sh}
     brew install gmp mpfr
     \endcode

   - For CAPD developers: install also
     \code{.sh}
     brew install automake libtool svn log4cxx python
     \endcode
     to generate documentation
     \code{.sh}
     brew install doxygen
     \endcode

   - <i>Optional</i> step - graphical library X11 support:
     \verbinclude osx_install_x11.sh

     Verify previous steps with pkg-config:
     \code{.sh}
     pkg-config x11 --libs --cflags
     \endcode

5) <i>Optional/Experimental</i> Recently OSX version of gcc/g++ switched to <b>clang</b> engine.
We have not tested it for compatibility with our code.
You can compile the code, but we are not sure about compatibility with roundings etc.
You can experiment with original version of gcc/g++ which you can install using following commands:
\code{.sh}
brew install gcc
\endcode

*/
