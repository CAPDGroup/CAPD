/*! \page capd_compilation Build CAPD

This section describes how to compile the \b CAPD library from sources. 

Before compiling the library, please check if all \ref capd_requirements "System Requirements" are fulfilled.

\section  capd_compilation_quick_quide Quick guide on how to build the library

Here is a short list of commands which clones the repository, builds the library with support to multriprecision computation enabled, builds example programs and runs all tests. For more details and options see below.

\code
git clone https://github.com/CAPDGroup/CAPD
cd CAPD
mkdir build
cd build
cmake .. 
make -j
\endcode

\section  capd_compilation_configuration Configuration

First download the sources of CAPD (see \ref capd_getit for more details):

- either clone the latest master branch of the repository
\code
git clone https://github.com/CAPDGroup/CAPD
\endcode

- or download and unzip the latest stable version from
[**github.com/CAPDGroup/CAPD/releases**](https://github.com/CAPDGroup/CAPD/releases)


We are using the \b cmake tool to configure the CAPD library. First, you need to create an empty directory in which the library will be built. For example, 
\code
mkdir build
cd build
cmake <path_to_CAPD_source_directory> [options] 
make -j
\endcode

\section  capd_compilation_options List of cmake options

Available CAPD-specific options are:
-#  <code>--DCAPD_ENABLE_MULTIPRECISION=<true|false></code> - turns on/off support for computation in multiprecision. If \b true, cmake checks if \b gmp and \b mpfr libraries are installed. Default value is \b true.
\note to enable multiprecision \b gmp and \b mpfr libraries must be installed in the system along with their header files.

-#  <code>--DCAPD_BUILD_EXAMPLES=<true|false></code> - specifies wheter example programs should be built or not. Default value is \b false.

-#  <code>--DCAPD_BUILD_TESTS=<true|false></code> - specifies whether test programs should be built or not. Default value is \b false.
\note Most of the tests are written using Boost test suite. Hence, in order to compile them boost unit test library should be installed in the system -- see \ref capd_requirements "System Requirements".

-#  <code>--DCAPD_BUILD_ALL=<true|false></code> - turns on/off building both examples and tests. Default value is \b false, that is building examples and tests depends on setting <code>CAPD_BUILD_EXAMPLES</code> and <code>CAPD_BUILD_TESTS</code>, respectively.

Usefull cmake general options:

-# <code>--DCMAKE_INSTALL_PREFIX=<path></code> - specifies the directory, where the CAPD library will be installed after call to <code>make install</code>.
   By default it is equal to <code>/usr/local/</code>.
   \note Installation of the library is optional. One can still build his own programs, having only locally compiled CAPD library -- see \ref user_programs for more details.
 
-# <code>--DCMAKE_CXX_COMPILER=compiler</code> - specifies, which C++ compiler (e.g. \b g++, \b clang++) will be used to build the library.

Example:
\code
cmake .. -DCAPD_BUILD_ALL=true -DCAPD_ENABLE_MULTIPRECISION=true -DCMAKE_CXX_COMPILER=clang++
\endcode

\section  capd_compilation_installation Installation of the library

This step is optional. After successful build of the library one can call

<code>
make install
</code>

The above command copies all header files and files for pkg-config to <tt>CMAKE_INSTALL_PREFIX</tt> directory. 
\note

The last command may require \e administrator rights depending on the path specified in  <code>CMAKE_INSTALL_PREFIX</code>.

*/
