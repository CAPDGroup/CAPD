//////////////////////////////////////////////////////////////////////////////
//   Package:          CAPD

/////////////////////////////////////////////////////////////////////////////
//
/// @file quarticTest.cpp
///
/// @author Daniel Wilczak
//
/////////////////////////////////////////////////////////////////////////////

// Copyright (C) CAPD group
//
// This file constitutes a part of the CAPD library,
// distributed under the terms of the GNU General Public License.
// Consult  http://capd.ii.uj.edu.pl/ for details.

//#define BOOST_TEST_MODULE quarticTest
#include "compare.h"
BOOST_AUTO_TEST_SUITE(quarticSuite)

std::vector<double> computeQuarticDer(MapType::VectorType & u){
  double x = u[0].leftBound();
  double y = u[1].leftBound();

  // code generated by the following Mathematica code
  // W[n_,m_]:=D[(Sin[x]*Cos[y])^4,{x,n},{y,m}]/(n!m!)//FullSimplify
  // Table[Table[W[m-n,n]//CForm,{n,0,m}],{m,0,5}]//Flatten
  capd::rounding::DoubleRounding::roundNearest();
  double r[] = {Power(Cos(y),4)*Power(Sin(x),4),4*Cos(x)*Power(Cos(y),4)*Power(Sin(x),3),-4*Power(Cos(y),3)*Power(Sin(x),4)*Sin(y),2*(1 + 2*Cos(2*x))*Power(Cos(y),4)*Power(Sin(x),2),-16*Cos(x)*Power(Cos(y),3)*Power(Sin(x),3)*Sin(y),2*Power(Cos(y),2)*(1 - 2*Cos(2*y))*Power(Sin(x),4),(-2*Power(Cos(y),4)*(Sin(2*x) - 2*Sin(4*x)))/3.,-8*(1 + 2*Cos(2*x))*Power(Cos(y),3)*Power(Sin(x),2)*Sin(y),8*Cos(x)*Power(Cos(y),2)*(1 - 2*Cos(2*y))*Power(Sin(x),3),(2*Power(Sin(x),4)*(Sin(2*y) + 2*Sin(4*y)))/3.,-((Cos(2*x) - 4*Cos(4*x))*Power(Cos(y),4))/3.,(8*Power(Cos(y),3)*(Sin(2*x) - 2*Sin(4*x))*Sin(y))/3.,-4*(1 + 2*Cos(2*x))*Power(Cos(y),2)*(-1 + 2*Cos(2*y))*Power(Sin(x),2),(8*Cos(x)*Power(Sin(x),3)*(Sin(2*y) + 2*Sin(4*y)))/3.,((Cos(2*y) + 4*Cos(4*y))*Power(Sin(x),4))/3.,(2*Power(Cos(y),4)*(Sin(2*x) - 8*Sin(4*x)))/15.,(4*(Cos(2*x) - 4*Cos(4*x))*Power(Cos(y),3)*Sin(y))/3.,(4*Power(Cos(y),2)*(-1 + 2*Cos(2*y))*(Sin(2*x) - 2*Sin(4*x)))/3.,(4*(1 + 2*Cos(2*x))*Power(Sin(x),2)*(Sin(2*y) + 2*Sin(4*y)))/3.,(4*Cos(x)*(Cos(2*y) + 4*Cos(4*y))*Power(Sin(x),3))/3.,(-2*Power(Sin(x),4)*(Sin(2*y) + 8*Sin(4*y)))/15.};
  return std::vector<double> (r,r+sizeof(r)/sizeof(double));
}

BOOST_AUTO_TEST_CASE(xquartic)
{
  std::string txt = "var:x,y;fun:(sin(x)*cos(y))^4;",
              msg = "Function \"" + txt + "\"  x = " ;
  MapType f(txt,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .5; x[1] = 0.25;
  std::vector<double> expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.5,0.25)");

  MapType g("var:x,y;fun:(-sin(x)*cos(-y))^4;",5);
  g(x,df);
  compareResults(expected, df, msg+"(0.5,0.25)");

  x[0] = -0.75; x[1] = -0.1;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.75,-0.1)");

  x[0] = 0.0; x[1]= 0.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");

  x[0] = 1.0; x[1] = 0.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(1.0,0.0)");

  x[0] = 0.0; x[1] = 1.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,1.0)");
}

using capd::autodiff::Node;

void _f(Node /*t*/, Node in[], int /*dimIn*/, Node out[], int /*dimOut*/, Node /*params*/[], int /*noParams*/)
{
  out[0] = (sin(in[0])*cos(in[1]))^4;
}

BOOST_AUTO_TEST_CASE(xquarticnode)
{
  std::string msg = "Function \"(sin(x)*cos(y))^4\"  (x,y) = " ;
  MapType f(_f,2,1,0,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .1; x[1]=1;
  std::vector<double> expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(.1,1)");

  x[0] = -0.143; x[1] = 0.6;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.143,0.6)");

  x[0] = 0.0; x[1] = 0.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");

  x[0] = 1.0; x[1] = 0.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(1.0,0.0)");

  x[0] = 0.0; x[1] = 1.0;
  expected = computeQuarticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,1.0)");
}
BOOST_AUTO_TEST_SUITE_END()