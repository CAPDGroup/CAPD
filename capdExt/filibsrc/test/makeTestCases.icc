/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#include <iostream>
#include <string>

#include "interval/interval.hpp"

template <typename T>
struct TestSetDecl
{};

template<>
struct TestSetDecl<bool>
{
	static void generate(std::string name, std::ostream &os) 
	{
		os << "bool " << name << "[] = {" << std::endl << std::endl;
	}
};

template<>
struct TestSetDecl<int> 
{
	static void generate(std::string name, std::ostream &os) 
	{
		os << "int " << name << "[] = {" << std::endl << std::endl; 
	}
};

template<>
struct TestSetDecl<unsigned int> 
{
	static void generate(std::string name, std::ostream &os) 
	{
		os << "unsigned int " << name << "[] = {" << std::endl << std::endl; 
	}
};

template<>
struct TestSetDecl<double>
{
	static void generate(std::string name, std::ostream &os) 
	{
		os << "unsigned int " << name << "[][4] = {" << std::endl << std::endl;
	}
};

template <typename N, filib::rounding_strategy K, filib::interval_mode E>
struct TestSetDecl< filib::interval<N,K,E> >
{
	static void generate(std::string name, std::ostream &os) 
	{
		os << "unsigned int " << name << "[][2][4] = {" << std::endl << std::endl;
	}
};

template <typename T>
void bitImage(T t, std::ostream &os) 
{
	os << t << std::endl;
}

template<>
void bitImage(double x, std::ostream &os) 
{
	filib::primitive::bitImage(x, os);
}

template<>
void bitImage(filib::interval<double,filib::native_switched,filib::i_mode_extended> x, std::ostream &os) 
{
	x.bitImage(os);
}

template<>
void bitImage(bool x, std::ostream &os) 
{
	if (x)
		os << "true";
	else
		os << "false";
	os << std::endl;
}

void printDoubleParts(double x, std::ostream &os)
{
	unsigned int sign, expo, mantUpper, mantLower;
	filib::primitive::decompose(x , sign, expo, mantUpper, mantLower);

	std::ostream::fmtflags options = os.flags(std::ostream::hex);

	os.setf(std::ostream::hex);
	os << "  { 0x" << sign << ", 0x";
	os << std::setw(3) << std::setfill('0') << expo << ", 0x";
	os << std::setw(5) << std::setfill('0') << mantUpper << ", 0x";
	os << std::setw(8) << std::setfill('0') << mantLower << " }";

	os.flags(options);
}

void printTestCase(bool x, std::ostream &os) 
{
	if (x)
		os << "true";
	else
		os << "false";
}

void printTestCase(int x, std::ostream &os) 
{
	std::ostream::fmtflags options = os.flags(std::ostream::dec);
	os << x;

	os.flags(options);
}

void printTestCase(unsigned int x, std::ostream &os) 
{
	std::ostream::fmtflags options = os.flags(std::ostream::dec);

	os << x;

	os.flags(options);
}

void printTestCase(double x, std::ostream &os) 
{
	unsigned int sign, expo, mantUpper, mantLower;
	filib::primitive::decompose(x , sign, expo, mantUpper, mantLower);

	std::ostream::fmtflags options = os.flags(std::ostream::hex);

	os << "  { 0x" << sign << ", 0x";
	os << std::setw(3) << std::setfill('0') << expo << ", 0x";
	os << std::setw(5) << std::setfill('0') << mantUpper << ", 0x";
	os << std::setw(8) << std::setfill('0') << mantLower << " }";

	os.flags(options);
}

void printTestCase(filib::interval<double,filib::native_switched,filib::i_mode_extended> x, std::ostream &os) 
{
	os << "{" << std::endl;
	printDoubleParts(inf(x), os);
	os << "," << std::endl;
	printDoubleParts(sup(x), os);
	os << std::endl << "}";
}

template <class T>
void printTestSet(std::string name, int numCases, int numExtCases, 
	T const *testSet, std::ostream &os)
{
	TestSetDecl<T>::generate(name,os);

	/* printTestSetDecl(testSet[0], os); */

	for ( int s1 = numExtCases; s1 < numCases; ++s1 )
	{
		printTestCase(testSet[s1], os);
		os << "," << std::endl << std::endl;
	}
	if ( numExtCases )
	{
		os << "#if defined(FILIB_EXTENDED)" << std::endl;
		for ( int s2 = 0; s2 < numExtCases; ++s2 )
		{
			printTestCase(testSet[s2], os);
			os << "," << std::endl << std::endl;
		}
		os << "#endif" << std::endl;
	}

	#if 0
	int n=0;

	if (numExtCases > 0) 
	{
		os << "#if defined(FILIB_EXTENDED)" << std::endl;

		for (int i=0; i<numExtCases; i++) 
		{
			printTestCase(testSet[i], os);
			os << "," << std::endl << std::endl;
		}
		os << "#endif" << std::endl << std::endl;
		n = numExtCases;
	}

	for (int i=n; i<numCases; i++)
	{
		printTestCase(testSet[i], os);
		os << "," << std::endl << std::endl;
	}
	#endif
  
	os << "};" << std::endl << std::endl << std::endl;
}

template<class T>
T intersect(T const &, T const &)
{
	std::cout << "Intersect only for filib::intervals !" << std::endl;
	std::abort();

	#if defined(__KCC) || defined(__GNUC__)
		return T(-1);
	#endif
}

template<>
filib::interval<double,filib::native_switched,filib::i_mode_extended> intersect(
	filib::interval<double,filib::native_switched,filib::i_mode_extended> const & a, 
	filib::interval<double,filib::native_switched,filib::i_mode_extended> const & b)
{
	filib::intersect_fo<double,filib::native_switched,filib::i_mode_extended> intersect_fo;
	return intersect_fo(a,b);
}

void header(std::string s) 
{
	std::cout << std::endl;

	for (unsigned int i=0; i<75; i++)
		std::cout << '-';

	std::cout << std::endl << s << std::endl;

	for (unsigned int i=0; i<75; i++)
		std::cout << '-';
	std::cout << std::endl;
}

void ask()
{
	/*
	char ch;
	std::cout << "Ok [y/n] ? ";
	std::cin >> ch;
	if (ch != 'y') 
	{
		std::cout << std::endl << "*** ERROR ***" << std::endl << std::endl;
		exit(-1);
	}
	*/
	std::cout << std::endl;
}

void checkRep(bool)
{}

void checkRep(double)
{}

void printBounds(filib::interval<double,filib::native_switched,filib::i_mode_extended> z) 
{
	std::cout << "inf(z) = " << z.inf() << std::endl;
	std::cout << "sup(z) = " << z.sup() << std::endl;
}

void checkRep(filib::interval<double,filib::native_switched,filib::i_mode_extended> z) 
{
	#if defined(FILIB_EXTENDED)
	if (
		filib::fp_traits<double,filib::native_switched>::IsNaN(z.inf()) && !filib::fp_traits<double,filib::native_switched>::IsNaN(z.sup()) ||
		!filib::fp_traits<double,filib::native_switched>::IsNaN(z.inf()) && filib::fp_traits<double,filib::native_switched>::IsNaN(z.sup())) 
	{
		std::cout <<  std::endl << "***" << std::endl
			<< "Consistency problem: only one bound is NaN with z:" << std::endl;
		printBounds(z);
		std::cout << "***" << std::endl;
	}
	else if (!z.isEmpty() && z.inf() > z.sup()) 
	{
		std::cout << std::endl << "***" << std::endl
			<< "Consistency problem: z.inf() > z.sup() with z:" << std::endl;
		printBounds(z);
		std::cout << "***" << std::endl;
	}
	else if (z.sup() == filib::fp_traits<double,filib::native_switched>::ninfinity()) 
	{
		std::cout << std::endl << "***" << std::endl 
			<< "Consistency problem: wrong rep for [-INF]:" << std::endl;
		printBounds(z);
		std::cout << "***" << std::endl;
	}
	else if (z.inf() == filib::fp_traits<double,filib::native_switched>::infinity()) 
	{
		std::cout << std::endl << "***" << std::endl 
			<< "Consistency problem: wrong rep for [+INF]:" << std::endl;
		printBounds(z);
		std::cout << "***" << std::endl;
	}
	#endif
}

void printTestSetSize(std::string name, int numCases, int numExtCases, std::ostream &os) 
{
	std::ostream::fmtflags options = os.flags(std::ostream::dec);

	#if 0
	if (numExtCases == 0)
		os << "int " << name << "TestSetSize = " << numCases << ";" << std::endl;
	else 
	{
		os << "#if defined(FILIB_EXTENDED)" << std::endl;
		os << " int " << name << "TestSetSize = " << numCases 
			<< ";" << std::endl;
		os << "#else" << std::endl;
		os << " int " << name << "TestSetSize = " << numCases - numExtCases 
			<< ";" << std::endl;
		os << "#endif" << std::endl << std::endl;
	}
	#endif

	os << "size_t " << name << "TestSetSize[2] = {" << numCases - numExtCases
		<< ", " << numCases << "};" << std::endl;

	os.flags(options);
}

template <typename ArgT, typename ResT>
void
UnFunTest(std::string name, int numCases, int numExtCases, 
	ArgT const *testSet, 
	filib::unary_virtual_fo<ResT,ArgT> const & f,
	std::ostream &os,
	bool stdFun=false, 
	ResT * = 0) 
{
	ResT *result = new ResT[numCases];
    
	std::cout << std::endl;    
	header(name);

	for (int i=0; i<numCases; i++) 
	{
		std::cout << "----- " << i+1 << " -----" << std::endl;      
		std::cout << "x = " << testSet[i] << " =" << std::endl;
		bitImage(testSet[i], std::cout);
		std::cout << std::endl;

		if (stdFun) 
		{
			ResT res1, res2, res3;
			filib::fp_traits<double,filib::native_switched>::upward();
			res1 = f(testSet[i]);
			filib::fp_traits<double,filib::native_switched>::downward();
			res2 = f(testSet[i]);
			filib::fp_traits<double,filib::native_switched>::tonearest();
			res3 = f(testSet[i]);
			result[i] = intersect(res1, res2);
			result[i] = intersect(result[i], res3);
		}
      
		else
			result[i] = f(testSet[i]);

		checkRep(result[i]);
		std::cout << name << "(x) = " << result[i] << " =" << std::endl;
		bitImage(result[i], std::cout);
		std::cout << std::endl;      
		ask();
	}

	printTestSet(name + "Expected", numCases, numExtCases, result, os);
	os << std::endl;
    
	delete [] result;
}

template <typename ArgT1, typename ArgT2, typename ResT>
void
BinFunTest(std::string name, 
	int numCases, 
	int numExtCases, 
	ArgT1 const *testSet1, 
	ArgT2 const *testSet2, 
	filib::binary_virtual_fo<ResT,ArgT1,ArgT2> const & f,
	std::ostream &os, 
	filib::binary_virtual_fo<ResT,ArgT1,ArgT2> const & refFun, 
	std::string refFunName)
{
	ResT *result = new ResT[numCases];
    
	header(name);
    
	for (int i=0; i<numCases; i++) 
	{
		std::cout << "----- " << i+1 << " -----" << std::endl;    
		std::cout << "x = " << testSet1[i] << " =" << std::endl;
		bitImage(testSet1[i], std::cout);
		std::cout << std::endl;      
		std::cout << "y = " << testSet2[i] << " =" << std::endl;
		bitImage(testSet2[i], std::cout);
		std::cout << std::endl;      
		result[i] = f(testSet1[i], testSet2[i]);

		checkRep(result[i]);
		std::cout << name << "(x, y) = " << result[i] << " =" << std::endl;
		bitImage(result[i], std::cout);
	
		ResT refRes = refFun(testSet1[i], testSet2[i]);
	
		if (result[i] != refRes) 
		{
			std::cout << std::endl << "****************" << std::endl;
			std::cout << "Computed result is different from result of " 
				<< refFunName << ": " << std::endl;
			std::cout << refFunName << "(x, y) = " << refRes << " =" << std::endl;
			bitImage(refRes, std::cout);
			exit(-1);
		}
      
		ask();
	}

	printTestSet(name + "Expected", numCases, numExtCases, result, os);
	os << std::endl;

	delete [] result;
}

template <typename ArgT1, typename ArgT2, typename ResT>
void
BinFunTest(std::string name, 
	int numCases, 
	int numExtCases, 
	ArgT1 const *testSet1, 
	ArgT2 const *testSet2, 
	filib::binary_virtual_fo<ResT,ArgT1,ArgT2> const & f,
	std::ostream &os)
{
	ResT *result = new ResT[numCases];
    
	header(name);
    
	for (int i=0; i<numCases; i++) 
	{
		std::cout << "----- " << i+1 << " -----" << std::endl;    
		std::cout << "x = " << testSet1[i] << " =" << std::endl;
		bitImage(testSet1[i], std::cout);
		std::cout << std::endl;      
		std::cout << "y = " << testSet2[i] << " =" << std::endl;
		bitImage(testSet2[i], std::cout);
		std::cout << std::endl;      
		result[i] = f(testSet1[i], testSet2[i]);

		checkRep(result[i]);
		std::cout << name << "(x, y) = " << result[i] << " =" << std::endl;
		bitImage(result[i], std::cout);
      
		ask();
	}

	printTestSet(name + "Expected", numCases, numExtCases, result, os);
	os << std::endl;

	delete [] result;
}

filib::interval<double,filib::native_switched,filib::i_mode_extended> * mkRegResults(int k)
{
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *results = new filib::interval<double,filib::native_switched,filib::i_mode_extended>[30];
	int j=1;

	for (int i=0; i<30; i++) 
	{
		results[i] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(hexu(out_no[k][j]), hexu(out_no[k][j+1]));
		j +=2;
	}

	return results;
}

/**
 Test set for pred and succ
*/
void makePredSuccTestSet(std::ostream &os) 
{
	unsigned int rawTestSet[][4] = 
	{
		// negative numbers
		// ----------------
    
		//  -0
		{ 0x1, 0x000, 0x00000, 0x00000000 },

		// empty mantissa
		{ 0x1, 0x001, 0x00000, 0x00000000 },
		{ 0x1, 0x5F1, 0x00000, 0x00000000 },
		{ 0x1, 0x7FE, 0x00000, 0x00000000 },
    
		// empty lower mantissa part
		{ 0x1, 0x421, 0x00001, 0x00000000 },
		{ 0x1, 0x123, 0x11111, 0x00000000 },

		// non-empty mantissa
		{ 0x1, 0x0FF, 0xFE123, 0x12345678 },

		// full mantissa
		{ 0x1, 0x000, 0xFFFFF, 0xFFFFFFFF},
		{ 0x1, 0x3FF, 0xFFFFF, 0xFFFFFFFF},
		{ 0x1, 0x7FE, 0xFFFFF, 0xFFFFFFFF},

		// full lower mantissa part
		{ 0x1, 0x000, 0x00000, 0xFFFFFFFF},
		{ 0x1, 0x000, 0xFFFFE, 0xFFFFFFFF},

		// non- full mantissa
		{ 0x1, 0x000, 0x00000, 0x00000001},
		{ 0x1, 0x7FE, 0xFFFFF, 0xFFFFFFFE},

		// neg, infinity
		{ 0x1, 0x7FF, 0x00000, 0x00000000},
    
		// NaN
		{ 0x1, 0x7FF, 0x00100, 0x000A0009},

		// positive numbers
		// ----------------

		//  +0
		{ 0x0, 0x000, 0x00000, 0x00000000 },
    
		// empty mantissa
		{ 0x0, 0x3FF, 0x00000, 0x00000000 },
		{ 0x0, 0x555, 0x00000, 0x00000000 },

		// empty lower mantissa part
		{ 0x0, 0x401, 0x00001, 0x00000000 },
		{ 0x0, 0x111, 0x11111, 0x00000000 },

		// non-empty mantissa
		{ 0x0, 0x0FF, 0xFE123, 0x12345678 },

		// full mantissa
		{ 0x0, 0x123, 0xFFFFF, 0xFFFFFFFF},
		{ 0x0, 0x3FF, 0xFFFFF, 0xFFFFFFFF},
		{ 0x0, 0x50A, 0xFFFFF, 0xFFFFFFFF},
		{ 0x0, 0x7FE, 0xFFFFF, 0xFFFFFFFF},

		// full lower mantissa part
		{ 0x0, 0x000, 0x00000, 0xFFFFFFFF},
		{ 0x0, 0x000, 0xFFFFE, 0xFFFFFFFF},

		// non- full mantissa
		{ 0x0, 0x000, 0x00000, 0x00000001},
		{ 0x0, 0x7FE, 0xFFFFF, 0xFFFFFFFE},

		// pos. infinity
		{ 0x0, 0x7FF, 0x00000, 0x00000000},

		// NaN
		{ 0x0, 0x7FF, 0x10000, 0x00000000}
	};
  
	int n = (sizeof(rawTestSet) / sizeof(unsigned int)) / 4;

	double *predSuccTestSet = new double[n];

	for (int i=0; i<n; i++)
		predSuccTestSet[i] = filib::primitive::compose(rawTestSet[i][0], rawTestSet[i][1], 
			rawTestSet[i][2], rawTestSet[i][3]);

	printTestSetSize("predSucc", n, 0, os);
	printTestSet("predSuccTestSet", n, 0, predSuccTestSet, os);

	filib::pred_fo<double> pred_fo;
		UnFunTest<double, double>
		(std::string("pred"), n, 0, predSuccTestSet, pred_fo, os, false);

	filib::succ_fo<double> succ_fo;
		UnFunTest<double, double>
		(std::string("succ"), n, 0, predSuccTestSet, succ_fo, os, false);

	delete [] predSuccTestSet;
}

int const citsExtendedCases = 13;
int const srtsExtendedCases = 15;

filib::interval<double,filib::native_switched,filib::i_mode_extended> commonIntvTestSet[
	#if defined(FILIB_EXTENDED)
		21
	#else
		8
	#endif
	];
filib::interval<double,filib::native_switched,filib::i_mode_extended> setRelTestSet1 [31];
filib::interval<double,filib::native_switched,filib::i_mode_extended> setRelTestSet2 [31];

size_t setRelTestSet1_size()
{ return sizeof(setRelTestSet1)/sizeof(setRelTestSet1[0]); }
size_t setRelTestSet2_size()
{ return sizeof(setRelTestSet2)/sizeof(setRelTestSet2[0]); }
size_t commonIntvTestSet_size()
{ return sizeof(commonIntvTestSet)/sizeof(commonIntvTestSet[0]); }

void setup_sets()
{
	do
	{
		size_t i = 0;

		#if defined(FILIB_EXTENDED)
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(),  0.0),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(),  1.0),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::max()),
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max()),
		#endif
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),           
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),            
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),            
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.1, -2.0),     
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.3, 0.0),      
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-4.0, -1.0),     
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 6.7),       
		commonIntvTestSet[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.1);
	} while (0);

	do 
	{
		size_t i = 0;
	
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), filib::fp_traits<double,filib::native_switched>::max()),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e50, filib::fp_traits<double,filib::native_switched>::infinity()),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		// -------------------------
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.7, 2.4),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, 5.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.5),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.9, -1.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(3.4, 3.9),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, 1.2),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.42, 42.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.5),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 13.2),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 2.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(42.0),
		setRelTestSet1[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(17.5);
	} while(0);

	do 	
	{
		size_t i = 0;
	
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), -1.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		// -------------------------
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.5e20, 2.0e21),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(5.0, 10.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-42.0, -2.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 4.5),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-20.0, -1.8),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(3.4, 3.5),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(17.5, 42.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, 1.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-100.0, 100.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1, 13.2),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 2.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1),
		setRelTestSet2[i++] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(17.5);
	} while(0);
}

/**
	Test set for filib::interval bounds
*/
static void makeBoundsTestSet(std::ostream &os) 
{
	int n = commonIntvTestSet_size();
  
	// -----
	// inf()
	// -----
	filib::inf_fo<double,filib::native_switched,filib::i_mode_extended> inf_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		(
			std::string("inf"), 
			static_cast<int>(n), 
			static_cast<int>(citsExtendedCases), 
			commonIntvTestSet, 
			inf_fo,
			os);

	// -----
	// sup()
	// -----
	filib::sup_fo<double,filib::native_switched,filib::i_mode_extended> sup_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		(
			std::string("sup"), 
			n, 
			citsExtendedCases, 
			commonIntvTestSet, 
			sup_fo,
			os);
}

/**
   Test set for info functions
 */

static void makeInfoTestSet(std::ostream &os) 
{
	int n = commonIntvTestSet_size();

	// ---------
	// isPoint()
	// ---------
	filib::isPoint_fo<double,filib::native_switched,filib::i_mode_extended> isPoint_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("isPoint", n, citsExtendedCases, commonIntvTestSet, 
		isPoint_fo, os);

	// ---------
	// isEmpty()
	// ---------
	filib::isEmpty_fo<double,filib::native_switched,filib::i_mode_extended> isEmpty_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("isEmpty", n, citsExtendedCases, commonIntvTestSet, 
		isEmpty_fo, os);

	// ------------
	// isInfinite()
	// ------------
	filib::isInfinite_fo<double,filib::native_switched,filib::i_mode_extended> isInfinite_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("isInfinite", n, citsExtendedCases, commonIntvTestSet, 
		isInfinite_fo, os);

	// -----------
	// hasUlpAcc()
	// -----------
	int hasUlpAccExtendedCases = 4;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> hasUlpAccTestSet1[] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(18.33),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, filib::primitive::succ(1.1)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, filib::primitive::succ(1.1)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.2345, -1.2345 + 2*filib::primitive::ulp(-1.2345)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.2345, -1.2345 + 2*filib::primitive::ulp(-1.2345)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.2345, -1.2345 + 2*filib::primitive::ulp(-1.2345)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 3*filib::primitive::ulp(0.0)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 2.0 + 999*filib::primitive::ulp(2.0)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 2.0 + 999*filib::primitive::ulp(2.0)),
	};
  
	unsigned int hasUlpAccTestSet2[] = {
		0,
		1,
		2,
		3,
		0,
		100,
		0,
		1,
		1,
		2,
		10,
		3,
		100,
		1000,
	};

	n = sizeof(hasUlpAccTestSet1)/sizeof(hasUlpAccTestSet1[0]);

	printTestSetSize("hasUlpAcc", n, hasUlpAccExtendedCases, os);
	printTestSet("hasUlpAccTestSet1", n, hasUlpAccExtendedCases, 
		hasUlpAccTestSet1, os);
	printTestSet("hasUlpAccTestSet2", n, hasUlpAccExtendedCases, 
		hasUlpAccTestSet2, os);

	filib::hasUlpAcc_fo<double,filib::native_switched,filib::i_mode_extended> hasUlpAcc_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, unsigned int, bool>
	("hasUlpAcc", n, hasUlpAccExtendedCases, 
		hasUlpAccTestSet1, hasUlpAccTestSet2, 
		hasUlpAcc_fo, os);
}

/**
   Test set for utility functions
 */
static void makeUtilTestSet(std::ostream &os) 
{
	int n = commonIntvTestSet_size();

	// -----
	// mid()
	// -----
	filib::mid_fo<double,filib::native_switched,filib::i_mode_extended> mid_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("mid", n, citsExtendedCases, commonIntvTestSet, mid_fo, os);

	// ------
	// diam()
	// ------
	filib::diam_fo<double,filib::native_switched,filib::i_mode_extended> diam_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("diam", n, citsExtendedCases, commonIntvTestSet,  diam_fo, os);

	// ---------
	// relDiam()
	// ---------
	filib::relDiam_fo<double,filib::native_switched,filib::i_mode_extended> relDiam_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("relDiam", n, citsExtendedCases, commonIntvTestSet, 
		relDiam_fo, os);

	// -----
	// rad()
	// -----
	filib::rad_fo<double,filib::native_switched,filib::i_mode_extended> rad_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("rad", n, citsExtendedCases, commonIntvTestSet, 
		rad_fo, os);
  
	// -----
	// mig()
	// -----
	filib::mig_fo<double,filib::native_switched,filib::i_mode_extended> mig_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("mig", n, citsExtendedCases, commonIntvTestSet, 
		mig_fo, os);

	// -----
	// mag()
	// -----
	filib::mag_fo<double,filib::native_switched,filib::i_mode_extended> mag_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("mag", n, citsExtendedCases, commonIntvTestSet, 
		mag_fo, os);

	// -----
	// abs()
	// -----
	filib::abs_fo<double,filib::native_switched,filib::i_mode_extended> abs_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("abs", n, citsExtendedCases, commonIntvTestSet, 
		abs_fo, os);
  
	// -----------------
	// imin() and imax()
	// -----------------
	int minmaxExtendedCases = 6;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> minmaxTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(34.5, 199.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2, -1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(34.5, 99.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10, 10),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1,2),
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> minmaxTestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 3.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1, 0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(35.0, 42.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-15, 15),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.5, 1)
	};

	n = sizeof(minmaxTestSet1)/sizeof(minmaxTestSet1[0]);
	printTestSetSize("minmax", n, minmaxExtendedCases, os);
	printTestSet("minmaxTestSet1", n, minmaxExtendedCases, minmaxTestSet1, os);
	printTestSet("minmaxTestSet2", n, minmaxExtendedCases, minmaxTestSet2, os);
 
	// imin
	filib::imin_fo<double,filib::native_switched,filib::i_mode_extended> imin_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("imin", n, minmaxExtendedCases, minmaxTestSet1, minmaxTestSet2, 
		imin_fo, os);

	// imax
	filib::imax_fo<double,filib::native_switched,filib::i_mode_extended> imax_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("imax", n, minmaxExtendedCases, minmaxTestSet1, minmaxTestSet2, 
		imax_fo, os);

	// ------
	// dist()
	// ------
	int distExtendedCases = 7;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> distTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e-50, 1.234e34),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, 2.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.2, -1.1),
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> distTestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 3.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.7),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.3, 8.7),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.6)
	};
  
	n = sizeof(distTestSet1)/sizeof(distTestSet1[0]);
	printTestSetSize("dist", n, distExtendedCases, os);
	printTestSet("distTestSet1", n, distExtendedCases, distTestSet1, os);
	printTestSet("distTestSet2", n, distExtendedCases,distTestSet2, os);
 
	filib::dist_fo<double,filib::native_switched,filib::i_mode_extended> dist_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, double>
		("dist", n, distExtendedCases, distTestSet1, distTestSet2, 
		dist_fo, os);

	// ------
	// blow()
	// ------
	int blowExtendedCases = 5;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> blowTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 5.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 2.0)
	};

	double blowTestSet2 [] = {
		0.55,
		1.25,
		0.5,
		9.99,
		0.1,
		0.5,
		1.0,
		5.0,
		9.0,
		8.0
	};

	n = sizeof(blowTestSet1)/sizeof(blowTestSet1[0]);
	printTestSetSize("blow", n, blowExtendedCases, os);
	printTestSet("blowTestSet1", n, blowExtendedCases, blowTestSet1, os);
	printTestSet("blowTestSet2", n, blowExtendedCases, blowTestSet2, os);
 
	filib::blow_fo<double,filib::native_switched,filib::i_mode_extended> blow_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("blow", n, blowExtendedCases, blowTestSet1, blowTestSet2, 
		blow_fo, os);
}

// -------------------------------------------------------------------------
// Test set for set operations
// -------------------------------------------------------------------------
static void makeSetOpTestSet(std::ostream &os) 
{
	int n;

	// ----------------------
	// intersect() and hull()
	// ----------------------
	int intsHullExtendedCases = 9;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> intsHullTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, 0.0),
		// --------------------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.5, filib::fp_traits<double,filib::native_switched>::max()),
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> intsHullTestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, 42.42),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		// --------------------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), 42.0),
	};
  
	n = sizeof(intsHullTestSet1)/sizeof(intsHullTestSet1[0]);
	printTestSetSize("intsHull", n, intsHullExtendedCases, os);
	printTestSet("intsHullTestSet1", n, intsHullExtendedCases, 
		intsHullTestSet1, os);
	printTestSet("intsHullTestSet2", n, intsHullExtendedCases, 
		intsHullTestSet2, os);

	// intersect
	filib::intersect_fo<double,filib::native_switched,filib::i_mode_extended> intersect_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("intersect", n, intsHullExtendedCases,
		intsHullTestSet1, intsHullTestSet2, intersect_fo, os);

	// hull
	filib::hull_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> hull_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("hull", n, intsHullExtendedCases,
		intsHullTestSet1, intsHullTestSet2, hull_interval_interval_fo, os);

	// ---------------------------
	// hull() of filib::interval<double,filib::native_switched,filib::i_mode_extended>/double
	// ---------------------------
	int hullIDExtendedCases = 8;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> hullIDTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		// -------------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 42.42),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-19.0, -3.0),
	};
  
	double hullIDTestSet2 [] = 
	{
		0.5,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		42.0,
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		-1.0,
		-filib::fp_traits<double,filib::native_switched>::max(),
		// -------------------------
		-2.0,
		15.16,
		0.0,
	};

	n = sizeof(hullIDTestSet1)/sizeof(hullIDTestSet1[0]);
	printTestSetSize("hullID", n, hullIDExtendedCases, os);
	printTestSet("hullIDTestSet1", n, hullIDExtendedCases, 
		hullIDTestSet1, os);
	printTestSet("hullIDTestSet2", n, hullIDExtendedCases, 
		hullIDTestSet2, os);

	filib::hull_argtype_interval_fo<double,filib::native_switched,filib::i_mode_extended> hull_argtype_interval_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("hullID", n, hullIDExtendedCases,
		hullIDTestSet2, hullIDTestSet1, hull_argtype_interval_fo, os);

	// ---------------------------
	// hull() of double/double
	// ---------------------------
	int hullDDExtendedCases = 7;

	double hullDDTestSet1 [] = 
	{
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		-1.0,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		// -------------------------
		1.234,
		2.2,
		-8.0,
	};
  
	double hullDDTestSet2 [] = 
	{
		1.0,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		// -------------------------
		42.0,
		2.2,
		-10.0,
	};

	n = sizeof(hullDDTestSet1)/sizeof(hullDDTestSet1[0]);

	printTestSetSize("hullDD", n, hullDDExtendedCases, os);
	printTestSet("hullDDTestSet1", n, hullDDExtendedCases, 
		hullDDTestSet1, os);
	printTestSet("hullDDTestSet2", n, hullDDExtendedCases, 
		hullDDTestSet2, os);

	filib::hull_argtype_argtype_fo<double,filib::native_switched,filib::i_mode_extended> hull_argtype_argtype_fo;
	BinFunTest<double, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("hullDD", n, hullDDExtendedCases,
		hullDDTestSet1, hullDDTestSet2, hull_argtype_argtype_fo, os);

	// ----------
	// disjoint()
	// ----------
	n = sizeof(setRelTestSet1)/sizeof(setRelTestSet1[0]);

	filib::disjoint_fo<double,filib::native_switched,filib::i_mode_extended> disjoint_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
	("disjoint", n, srtsExtendedCases,
	 setRelTestSet1, setRelTestSet2, disjoint_fo, os);

	// ---------------------------------
	// in() (and implicitely contains())
	// ---------------------------------
	int inExtendedCases = 13;

	double inTestSet1 [] = 
	{
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		0.0,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		42.0,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		-filib::fp_traits<double,filib::native_switched>::max(),
		-1.1,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::max(),
		56.1,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		// -------------------
		-1.0,
		0.0,
		2.5,
		10.0,
		-1.1,
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> inTestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		// -------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 10.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.2, 10.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
	};
  
	n = sizeof(inTestSet1)/sizeof(inTestSet1[0]);

	printTestSetSize("in", n, inExtendedCases, os);
	printTestSet("inTestSet1", n, inExtendedCases, 
		inTestSet1, os);
	printTestSet("inTestSet2", n, inExtendedCases, 
		inTestSet2, os);

	filib::in_fo<double,filib::native_switched,filib::i_mode_extended> in_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("in", n, inExtendedCases,
		inTestSet1, inTestSet2, in_fo, os);

	// ----------
	// interior()
	// ----------
	n = sizeof(setRelTestSet1)/sizeof(setRelTestSet1[0]);

	filib::interior_fo<double,filib::native_switched,filib::i_mode_extended> interior_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("interior", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, interior_fo, os);

	// ----------
	// psb()
	// ----------
	filib::proper_subset_fo<double,filib::native_switched,filib::i_mode_extended> proper_subset_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("proper_subset", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, proper_subset_fo, os);

	// -----------------------
	// sb() (and operator <= ) 
	// -----------------------
	filib::subset_fo<double,filib::native_switched,filib::i_mode_extended> subset_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("subset", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, subset_fo, os);

	// ----
	// psp() 
	// ----
	filib::proper_superset_fo<double,filib::native_switched,filib::i_mode_extended> proper_superset_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("proper_superset", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, proper_superset_fo, os);

	// -----------------------
	// sp() (and operator >= )
	// -----------------------
	filib::superset_fo<double,filib::native_switched,filib::i_mode_extended> superset_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("superset", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, superset_fo, os);

	// ------------------------
	// seq() (and operator == )
	// ------------------------
	filib::seq_fo<double,filib::native_switched,filib::i_mode_extended> seq_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("seq", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, seq_fo, os);

	// ------------------------
	// sne() (and operator != )
	// ------------------------
	filib::sne_fo<double,filib::native_switched,filib::i_mode_extended> sne_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("sne", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, sne_fo, os);

	// -----
	// sge()
	// -----
	filib::sge_fo<double,filib::native_switched,filib::i_mode_extended> sge_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("sge", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, sge_fo, os);

	// -----
	// sgt()
	// -----
	filib::sgt_fo<double,filib::native_switched,filib::i_mode_extended> sgt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("sgt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, sgt_fo, os);

	// -----
	// sle()
	// -----
	filib::sle_fo<double,filib::native_switched,filib::i_mode_extended> sle_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("sle", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, sle_fo, os);

	// -----
	// slt()
	// -----
	filib::slt_fo<double,filib::native_switched,filib::i_mode_extended> slt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
	("slt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, slt_fo, os);

	// -----
	// ceq()
	// -----
	filib::ceq_fo<double,filib::native_switched,filib::i_mode_extended> ceq_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
	("ceq", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, ceq_fo, os);

	// -----
	// cne()
	// -----
	filib::cne_fo<double,filib::native_switched,filib::i_mode_extended> cne_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("cne", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, cne_fo, os);

	// -----
	// cge()
	// -----
	filib::cge_fo<double,filib::native_switched,filib::i_mode_extended> cge_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("cge", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, cge_fo, os);

	// -----
	// cgt()
	// -----
	filib::cgt_fo<double,filib::native_switched,filib::i_mode_extended> cgt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("cgt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, cgt_fo, os);

	// -----
	// cle()
	// -----
	filib::cle_fo<double,filib::native_switched,filib::i_mode_extended> cle_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("cle", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, cle_fo, os);

	// -----
	// clt()
	// -----
	filib::clt_fo<double,filib::native_switched,filib::i_mode_extended> clt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
	("clt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, clt_fo, os);

	// -----
	// peq()
	// -----
	filib::peq_fo<double,filib::native_switched,filib::i_mode_extended> peq_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("peq", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, peq_fo, os);

	// -----
	// pne()
	// -----
	filib::pne_fo<double,filib::native_switched,filib::i_mode_extended> pne_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("pne", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, pne_fo, os);

	// -----
	// pge()
	// -----
	filib::pge_fo<double,filib::native_switched,filib::i_mode_extended> pge_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("pge", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, pge_fo, os);

	// -----
	// pgt()
	// -----
	filib::pgt_fo<double,filib::native_switched,filib::i_mode_extended> pgt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("pgt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, pgt_fo, os);

	// -----
	// ple()
	// -----
	filib::ple_fo<double,filib::native_switched,filib::i_mode_extended> ple_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("ple", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, ple_fo, os);

	// -----
	// plt()
	// -----
	filib::plt_fo<double,filib::native_switched,filib::i_mode_extended> plt_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, bool>
		("plt", n, srtsExtendedCases,
		setRelTestSet1, setRelTestSet2, plt_fo, os);
}

// -------------------------------------------------------------------------
// Test set for arithmetic operations
// -------------------------------------------------------------------------

static void makeAriTestSet(std::ostream &os) 
{
	int n;

	// -------
	// unary -
	// -------
	int negExtendedCases = 6;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> negTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -2.0),
		// ---------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 3.0),
	};

	n = sizeof(negTestSet)/sizeof(negTestSet[0]);

	printTestSetSize("neg", n, negExtendedCases, os);
	printTestSet("negTestSet", n, negExtendedCases, 
		negTestSet, os);

	filib::unary_minus_fo<double,filib::native_switched,filib::i_mode_extended> unary_minus_fo;
	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("neg", n, negExtendedCases, 
		negTestSet, unary_minus_fo, os);

	// ------------------------------------------------
	// addition filib::interval<double,filib::native_switched,filib::i_mode_extended> + filib::interval<double,filib::native_switched,filib::i_mode_extended>, operators + and +=
	// ------------------------------------------------
	int addIIExtendedCases = 10;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> addIITestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.2, 2.4),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, 2.7),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1e-20, 1e-20),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1024.0),    
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> addIITestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		//XXX
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 1.0),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 4.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.7, 2.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e3, 1e4),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e-100),
	};
  
	n = sizeof(addIITestSet1)/sizeof(addIITestSet1[0]);
	printTestSetSize("addII", n, addIIExtendedCases, os);
	printTestSet("addIITestSet1", n, addIIExtendedCases, 
	addIITestSet1, os);
	printTestSet("addIITestSet2", n, addIIExtendedCases, 
	addIITestSet2, os);

	filib::plus_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> plus_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		(
			"addII",n, addIIExtendedCases, &addIITestSet1[0], &addIITestSet2[0], 
			plus_interval_interval_fo, os);

	filib::plus_upd_interval_interval_copy_fo<double,filib::native_switched,filib::i_mode_extended> plus_upd_interval_interval_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("addUpdII", n, addIIExtendedCases,
		&addIITestSet1[0], &addIITestSet2[0], 
		plus_upd_interval_interval_copy_fo, os,
		plus_interval_interval_fo, "addII");

	// ---------------------------------------------------------------
	// addition filib::interval<double,filib::native_switched,filib::i_mode_extended> + double (and vice versa), operators + and +=
	// ---------------------------------------------------------------
	int addIDExtendedCases = 17;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> addIDTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(10.0, 20.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::infinity()), 
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 0.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::max()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e-3),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
	};

	double addIDTestSet2 [] = 
	{
		0.0,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		1.0,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		1e-10,
		-filib::fp_traits<double,filib::native_switched>::max(),
		-filib::fp_traits<double,filib::native_switched>::max(),
		filib::fp_traits<double,filib::native_switched>::max(),
		filib::fp_traits<double,filib::native_switched>::max(),
		//-----------------------
		1e50,
		-1.0,
	};
  
	n = sizeof(addIDTestSet1)/sizeof(addIDTestSet1[0]);
	printTestSetSize("addID", n, addIDExtendedCases, os);
	printTestSet("addIDTestSet1", n, addIDExtendedCases, 
		addIDTestSet1, os);
	printTestSet("addIDTestSet2", n, addIDExtendedCases, 
		addIDTestSet2, os);

	filib::plus_interval_argtype_fo<double,filib::native_switched,filib::i_mode_extended> plus_interval_argtype_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("addID", n, addIDExtendedCases,
		&addIDTestSet1[0], &addIDTestSet2[0], 
		plus_interval_argtype_fo, os);

	filib::plus_argtype_interval_fo<double,filib::native_switched,filib::i_mode_extended> plus_argtype_interval_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("addDI", n, addIDExtendedCases,
		&addIDTestSet2[0], &addIDTestSet1[0], plus_argtype_interval_fo, os);

	filib::plus_upd_interval_argtype_copy_fo<double,filib::native_switched,filib::i_mode_extended> plus_upd_interval_argtype_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("addUpdID", n, addIDExtendedCases,
		&addIDTestSet1[0], &addIDTestSet2[0], plus_upd_interval_argtype_copy_fo, os);

	// ---------------------------------------------------
	// subtraction filib::interval<double,filib::native_switched,filib::i_mode_extended> - filib::interval<double,filib::native_switched,filib::i_mode_extended>, operators - and -=
	// ---------------------------------------------------

	// uses addition test sets !

	n = sizeof(addIITestSet1)/sizeof(addIITestSet1[0]);
	printTestSetSize("subII", n, addIIExtendedCases, os);
	printTestSet("subIITestSet1", n, addIIExtendedCases, 
		addIITestSet1, os);
	printTestSet("subIITestSet2", n, addIIExtendedCases, 
		addIITestSet2, os);

	filib::minus_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> minus_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("subII", n, addIIExtendedCases,
		&addIITestSet1[0], &addIITestSet2[0], minus_interval_interval_fo, os);

	filib::minus_upd_interval_interval_copy_fo<double,filib::native_switched,filib::i_mode_extended> minus_upd_interval_interval_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("subUpdII", n, addIIExtendedCases,
		&addIITestSet1[0], &addIITestSet2[0], minus_upd_interval_interval_copy_fo, os,
		minus_interval_interval_fo, "subII");

	// ------------------------------------------------------------------
	// subtraction filib::interval<double,filib::native_switched,filib::i_mode_extended> - double (and vice versa), operators - and -=
	// ------------------------------------------------------------------

	// uses addition test sets !

	n = sizeof(addIDTestSet1)/sizeof(addIDTestSet1[0]);
	printTestSetSize("subID", n, addIDExtendedCases, os);
	printTestSet("subIDTestSet1", n, addIDExtendedCases, 
		addIDTestSet1, os);
	printTestSet("subIDTestSet2", n, addIDExtendedCases, 
		addIDTestSet2, os);

	filib::minus_interval_argtype_fo<double,filib::native_switched,filib::i_mode_extended> minus_interval_argtype_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("subID", n, addIDExtendedCases,
		&addIDTestSet1[0], &addIDTestSet2[0], minus_interval_argtype_fo, os);

	filib::minus_argtype_interval_fo<double,filib::native_switched,filib::i_mode_extended> minus_argtype_interval_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("subDI", n, addIDExtendedCases,
		&addIDTestSet2[0], &addIDTestSet1[0], minus_argtype_interval_fo, os);

	filib::minus_upd_interval_argtype_copy_fo<double,filib::native_switched,filib::i_mode_extended> minus_upd_interval_argtype_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("subUpdID", n, addIDExtendedCases,
		&addIDTestSet1[0], &addIDTestSet2[0], minus_upd_interval_argtype_copy_fo, os);

	// ------------------------------------------------------
	// multiplication filib::interval<double,filib::native_switched,filib::i_mode_extended> * filib::interval<double,filib::native_switched,filib::i_mode_extended>, operators * and *=
	// ------------------------------------------------------

	int mulIIExtendedCases = 42;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> mulIITestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),     
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()), 
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-42.0, -0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, -0.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-9.0, -4.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.5, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.5, 0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.4, 10.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-100.0, 200.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, 23.55),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 23.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 4.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 42.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 12.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 1.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(10.0, 20.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(5.5, 7.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(10.4, 10.7),   
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::primitive::zero_succ, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::primitive::zero_succ, filib::primitive::zero_succ),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> mulIITestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 2.0),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.2, -0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.5, 3.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.5, -3.4),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-100.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1, 0.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 20.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(10.0, 11.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, -0.9),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.3, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-4.3, 1.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 19.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.5, 7.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-7.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 3.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 7.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.2, 3.4),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-6.0, -3.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-5.5, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-12.1, 0.8),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(11.1, 12.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e-50),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1e-50),
	};

	n = sizeof(mulIITestSet1)/sizeof(mulIITestSet1[0]);
	printTestSetSize("mulII", n, mulIIExtendedCases, os);
	printTestSet("mulIITestSet1", n, mulIIExtendedCases, 
		mulIITestSet1, os);
	printTestSet("mulIITestSet2", n, mulIIExtendedCases, 
		mulIITestSet2, os);

	filib::multiplies_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> multiplies_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("mulII", n, mulIIExtendedCases,
		&mulIITestSet1[0], &mulIITestSet2[0], multiplies_interval_interval_fo, os);

	filib::multiplies_upd_interval_interval_copy_fo<double,filib::native_switched,filib::i_mode_extended> multiplies_upd_interval_interval_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("mulUpdII", n, mulIIExtendedCases,
		&mulIITestSet1[0], &mulIITestSet2[0], multiplies_upd_interval_interval_copy_fo, os,
		multiplies_interval_interval_fo, "mulII");

	// ---------------------------------------------------------------------
	// multiplication filib::interval<double,filib::native_switched,filib::i_mode_extended> * double (and vice versa), operators * and *=
	// ---------------------------------------------------------------------
	int mulIDExtendedCases = 15;
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> const mulIDTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 3.3), 
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, -0.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max(), filib::fp_traits<double,filib::native_switched>::max()),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.5, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 3.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(13.4, 17.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.1, -0.9),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.3, 17.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.7),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.1, 1.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-50.0, -30.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-4.5, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.5, 1.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.9),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(10.1, 10.2),
	};

	double const mulIDTestSet2 [] = {
		0.0,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		0.0,
		0.0,
		0.0,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		2.0,
		//-----------------------
		-1.1,
		-2.5,
		-100.0,
		-1.1,
		-19.5,	
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		1.1,
		2.5,
		100.0,
		0.5,
		3.3,
	};

	n = sizeof(mulIDTestSet1)/sizeof(mulIDTestSet1[0]);
	printTestSetSize("mulID", n, mulIDExtendedCases, os);
	printTestSet("mulIDTestSet1", n, mulIDExtendedCases, 
		mulIDTestSet1, os);
	printTestSet("mulIDTestSet2", n, mulIDExtendedCases, 
		mulIDTestSet2, os);

	filib::multiplies_interval_argtype_fo<double,filib::native_switched,filib::i_mode_extended> multiplies_interval_argtype_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("mulID", n, mulIDExtendedCases,
		mulIDTestSet1, mulIDTestSet2, multiplies_interval_argtype_fo, os);

	filib::multiplies_argtype_interval_fo<double,filib::native_switched,filib::i_mode_extended> multiplies_argtype_interval_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("mulDI", n, mulIDExtendedCases,
		mulIDTestSet2, mulIDTestSet1, multiplies_argtype_interval_fo, os);

	filib::multiplies_upd_interval_argtype_copy_fo<double,filib::native_switched,filib::i_mode_extended> multiplies_upd_interval_argtype_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("mulUpdID", n, mulIDExtendedCases,
		mulIDTestSet1, mulIDTestSet2, multiplies_upd_interval_argtype_copy_fo, os);

	// ------------------------------------------------------
	// division filib::interval<double,filib::native_switched,filib::i_mode_extended> / filib::interval<double,filib::native_switched,filib::i_mode_extended>, operators / and /=
	// ------------------------------------------------------

	int divIIExtendedCases = 17;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> divIITestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.5, 3.7),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(4.7, 13.2),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::max()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::max()),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.5, -0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-5.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 4.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 4.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> divIITestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -0.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(4.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-5.0, -3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.5, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-4.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(4.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, -0.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.5, 2.0),
	};

	n = sizeof(divIITestSet1)/sizeof(divIITestSet1[0]);
	printTestSetSize("divII", n, divIIExtendedCases, os);
	printTestSet("divIITestSet1", n, divIIExtendedCases, 
		divIITestSet1, os);
	printTestSet("divIITestSet2", n, divIIExtendedCases, 
		divIITestSet2, os);

	filib::divides_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> divides_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("divII", n, divIIExtendedCases,
		divIITestSet1, divIITestSet2, divides_interval_interval_fo, os);

	filib::divides_upd_interval_interval_copy_fo<double,filib::native_switched,filib::i_mode_extended> divides_upd_interval_interval_copy_fo;		
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("divUpdII", n, divIIExtendedCases,
		divIITestSet1, divIITestSet2, divides_upd_interval_interval_copy_fo, os, 
		divides_interval_interval_fo, "divUpdII");

	// ---------------------------------------------------------------------
	// division filib::interval<double,filib::native_switched,filib::i_mode_extended> / double (and vice versa), operators / and /=
	// ---------------------------------------------------------------------
	int divIDExtendedCases = 12;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> divIDTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 2.3),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::max()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::max()),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-7.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(6.0, 9.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::primitive::zero_succ, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1, -filib::primitive::zero_succ),
	};

	double divIDTestSet2 [] = {
		2.5,
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		filib::fp_traits<double,filib::native_switched>::quiet_NaN(),
		0.0,
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		filib::fp_traits<double,filib::native_switched>::ninfinity(),
		filib::fp_traits<double,filib::native_switched>::infinity(),
		0.1,
		0.1,
		//-----------------------
		-3.0,
		2.0,
		-2.0,
		5.0,
		1e50,
		1e50,
	};
  
	n = sizeof(divIDTestSet1)/sizeof(divIDTestSet1[0]);
	printTestSetSize("divID", n, divIDExtendedCases, os);
	printTestSet("divIDTestSet1", n, divIDExtendedCases, 
		divIDTestSet1, os);
	printTestSet("divIDTestSet2", n, divIDExtendedCases, 
		divIDTestSet2, os);

	filib::divides_interval_argtype_fo<double,filib::native_switched,filib::i_mode_extended> divides_interval_argtype_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("divID", n, divIDExtendedCases,
		divIDTestSet1, divIDTestSet2, divides_interval_argtype_fo, os);

	filib::divides_argtype_interval_fo<double,filib::native_switched,filib::i_mode_extended> divides_argtype_interval_fo;
	BinFunTest<double, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("divDI", n, divIDExtendedCases,
		divIDTestSet2, divIDTestSet1, divides_argtype_interval_fo, os);

	filib::divides_upd_interval_argtype_copy_fo<double,filib::native_switched,filib::i_mode_extended> divides_upd_interval_argtype_copy_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, double, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("divUpdID", n, divIDExtendedCases,
		divIDTestSet1, divIDTestSet2, divides_upd_interval_argtype_copy_fo, os);
}

static filib::interval<double,filib::native_switched,filib::i_mode_extended> *
mkStdFunTestSet(int k,int numExtendedCases, filib::interval<double,filib::native_switched,filib::i_mode_extended> *extTestSet,
	std::string name, 
	filib::unary_virtual_fo < filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> > const & fun
)
{
	int i,j;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> res, comp;
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *testSet = new filib::interval<double,filib::native_switched,filib::i_mode_extended>[numExtendedCases + 30];
  
	for (i=0; i<numExtendedCases; i++)
		testSet[i] = extTestSet[i];
  
	j=1;

	while (j < 60) 
	{
		testSet[i] = filib::interval<double,filib::native_switched,filib::i_mode_extended>(hexu(in_no[k][j]), hexu(in_no[k][j+1]));
		res = filib::interval<double,filib::native_switched,filib::i_mode_extended>(hexu(out_no[k][j]), hexu(out_no[k][j+1]));
		comp = fun(testSet[i]);

		if (! (res <= comp)) 
		{
			std::cout << "Error in reference case " << i << " for " << name << std::endl;
			std::cout << "x = " << testSet[i] << std::endl;
			std::cout << "computed: " << comp << std::endl;
			comp.bitImage(std::cout);
			std::cout << std::endl;
			std::cout << "expected: " << res   << std::endl;
			res.bitImage(std::cout);
			std::cout << std::endl << std::endl;      

			/*
				if (inf(comp) > inf(res))
					std::cout << "inf(comp) > inf(exp)" << std::endl;
				if (sup(comp) < sup(res))
					std::cout << "sup(comp) < sup(res)" << std::endl;   
   
				double sup_res = sup(res);
				double sup_comp = sup(comp);
      
				unsigned int *tmp = (unsigned int *)(&res);
				std::cout << "res : " << hex << tmp[2] << tmp[3] << std::endl << std::endl;    
				tmp = (unsigned int *)(&comp);
				std::cout << "comp: " << hex << tmp[2] << tmp[3] << std::endl << std::endl;      
			*/
		}
    
		j += 2;
		i++;
	}

	return testSet;
}

static void makeStdFunTestSet(std::ostream &os) 
{
	initStdFunTestCases();

	int n, k=1;

	// -----
	// exp()
	// -----
	int expExtendedCases = 8;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> expExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *expRegExpected = mkRegResults(k);
  
	filib::exp_fo<double,filib::native_switched,filib::i_mode_extended> exp_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *expTestSet = 
		mkStdFunTestSet(k++, expExtendedCases, expExtTestSet, "exp", 
		exp_fo);

	n = expExtendedCases + 30;
	printTestSetSize("exp", n, expExtendedCases, os);
	printTestSet("expTestSet", n, expExtendedCases, expTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("exp", 
		n, 
		expExtendedCases, 
		expTestSet, 
		exp_fo, os,
		true,
		expRegExpected);

	delete [] expRegExpected;
	delete [] expTestSet;
  
	// ------
	// exp2()
	// ------
	int exp2ExtendedCases = 6;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> exp2ExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *exp2RegExpected = mkRegResults(k);
  
	filib::exp2_fo<double,filib::native_switched,filib::i_mode_extended> exp2_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *exp2TestSet = 
	mkStdFunTestSet(k++, exp2ExtendedCases, exp2ExtTestSet, "exp2", exp2_fo);
  
	n = exp2ExtendedCases + 30;
	printTestSetSize("exp2", n, exp2ExtendedCases, os);
	printTestSet("exp2TestSet", n, exp2ExtendedCases, exp2TestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("exp2", n, exp2ExtendedCases, exp2TestSet, exp2_fo, os,
		true, exp2RegExpected);

	delete [] exp2RegExpected;
	delete [] exp2TestSet;
  
	// -------
	// exp10()
	// -------
	int exp10ExtendedCases = 6;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> exp10ExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *exp10RegExpected = mkRegResults(k);
  
	filib::exp10_fo<double,filib::native_switched,filib::i_mode_extended> exp10_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *exp10TestSet = 
	mkStdFunTestSet(k++, exp10ExtendedCases, exp10ExtTestSet, "exp10", exp10_fo);
  
	n = exp10ExtendedCases + 30;
	printTestSetSize("exp10", n, exp10ExtendedCases, os);
	printTestSet("exp10TestSet", n, exp10ExtendedCases, exp10TestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("exp10", n, exp10ExtendedCases, exp10TestSet, exp10_fo, os,
		true, exp10RegExpected);

	delete [] exp10RegExpected;
	delete [] exp10TestSet;
  
	// -----
	// log()
	// -----
	int logExtendedCases = 12;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> logExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *logRegExpected = mkRegResults(k);
  
	filib::log_fo<double,filib::native_switched,filib::i_mode_extended> log_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *logTestSet = 
		mkStdFunTestSet(k++, logExtendedCases, logExtTestSet, "log", log_fo);
  
	n = logExtendedCases + 30;
	printTestSetSize("log", n, logExtendedCases, os);
	printTestSet("logTestSet", n, logExtendedCases, logTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("log", n, logExtendedCases, logTestSet, log_fo, os,
		true, logRegExpected);

	delete [] logRegExpected;
	delete [] logTestSet;
  
	// ------
	// log2()
	// ------
	int log2ExtendedCases = 12;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> log2ExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log2RegExpected = mkRegResults(k);
  
	filib::log2_fo<double,filib::native_switched,filib::i_mode_extended> log2_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log2TestSet = 
		mkStdFunTestSet(k++, log2ExtendedCases, log2ExtTestSet, "log2", log2_fo);

	n = log2ExtendedCases + 30;
	printTestSetSize("log2", n, log2ExtendedCases, os);
	printTestSet("log2TestSet", n, log2ExtendedCases, log2TestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("log2", n, log2ExtendedCases, log2TestSet, log2_fo, os,
		true, log2RegExpected);

	delete [] log2RegExpected;
	delete [] log2TestSet;
  
	// -------
	// log10()
	// -------
	int log10ExtendedCases = 12;

	filib::interval<double,filib::native_switched,filib::i_mode_extended> log10ExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log10RegExpected = mkRegResults(k);
	filib::log10_fo<double,filib::native_switched,filib::i_mode_extended> log10_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log10TestSet = 
		mkStdFunTestSet(k++, log10ExtendedCases, log10ExtTestSet, "log10", log10_fo);
  
	n = log10ExtendedCases + 30;
	printTestSetSize("log10", n, log10ExtendedCases, os);
	printTestSet("log10TestSet", n, log10ExtendedCases, log10TestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("log10", n, log10ExtendedCases, log10TestSet, log10_fo, os,
		true, log10RegExpected);

	delete [] log10RegExpected;
	delete [] log10TestSet;
  
	// -----
	// sin()
	// -----
	int sinExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> sinExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sinRegExpected = mkRegResults(k);
	filib::sin_fo<double,filib::native_switched,filib::i_mode_extended> sin_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sinTestSet = 
		mkStdFunTestSet(k++, sinExtendedCases, sinExtTestSet, "sin", sin_fo);
  
	n = sinExtendedCases + 30;
	printTestSetSize("sin", n, sinExtendedCases, os);
	printTestSet("sinTestSet", n, sinExtendedCases, sinTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("sin", n, sinExtendedCases, sinTestSet, sin_fo, os,
		true, sinRegExpected);

	delete [] sinRegExpected;
	delete [] sinTestSet;
  
	// -----
	// cos()
	// -----
	int cosExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> cosExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cosRegExpected = mkRegResults(k);
  		filib::cos_fo<double,filib::native_switched,filib::i_mode_extended> cos_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cosTestSet = 
		mkStdFunTestSet(k++, cosExtendedCases, cosExtTestSet, "cos", cos_fo);
  
	n = cosExtendedCases + 30;
	printTestSetSize("cos", n, cosExtendedCases, os);
	printTestSet("cosTestSet", n, cosExtendedCases, cosTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("cos", n, cosExtendedCases, cosTestSet, cos_fo, os,
		true, cosRegExpected);

	delete [] cosRegExpected;
	delete [] cosTestSet;
  

	// -----
	// tan()
	// -----
	int tanExtendedCases = 5;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> tanExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *tanRegExpected = mkRegResults(k);
  		filib::tan_fo<double,filib::native_switched,filib::i_mode_extended> tan_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *tanTestSet = 
		mkStdFunTestSet(k++, tanExtendedCases, tanExtTestSet, "tan", tan_fo);
  
	n = tanExtendedCases + 30;
	printTestSetSize("tan", n, tanExtendedCases, os);
	printTestSet("tanTestSet", n, tanExtendedCases, tanTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("tan", n, tanExtendedCases, tanTestSet, tan_fo, os,
		true, tanRegExpected);

	delete [] tanRegExpected;
	delete [] tanTestSet;
  
	// -----
	// cot()
	// -----
	int cotExtendedCases = 10;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> cotExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::primitive::pred(0.0)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::primitive::succ(0.0)),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::interval<double,filib::native_switched,filib::i_mode_extended>::PI().inf()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::interval<double,filib::native_switched,filib::i_mode_extended>::PI().sup()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::PI(),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cotRegExpected = mkRegResults(k);
    		filib::cot_fo<double,filib::native_switched,filib::i_mode_extended> cot_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cotTestSet = 
		mkStdFunTestSet(k++, cotExtendedCases, cotExtTestSet, "cot", cot_fo);
  
	n = cotExtendedCases + 30;
	printTestSetSize("cot", n, cotExtendedCases, os);
	printTestSet("cotTestSet", n, cotExtendedCases, cotTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("cot", n, cotExtendedCases, cotTestSet, cot_fo, os,
		true, cotRegExpected);

	delete [] cotRegExpected;
	delete [] cotTestSet;

	// -----
	// asin()
	// -----
	int asinExtendedCases = 6;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> asinExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 10.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *asinRegExpected = mkRegResults(k);
  		filib::asin_fo<double,filib::native_switched,filib::i_mode_extended> asin_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *asinTestSet = 
		mkStdFunTestSet(k++, asinExtendedCases, asinExtTestSet, "asin", asin_fo);
  
	n = asinExtendedCases + 30;
	printTestSetSize("asin", n, asinExtendedCases, os);
	printTestSet("asinTestSet", n, asinExtendedCases, asinTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
	("asin", n, asinExtendedCases, asinTestSet, asin_fo, os,
		true, asinRegExpected);

	delete [] asinRegExpected;
	delete [] asinTestSet;
  
	// ------
	// acos()
	// ------
	int acosExtendedCases = 7;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> acosExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 10.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 10.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acosRegExpected = mkRegResults(k);
    		filib::acos_fo<double,filib::native_switched,filib::i_mode_extended> acos_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acosTestSet = 
		mkStdFunTestSet(k++, acosExtendedCases, acosExtTestSet, "acos", acos_fo);
  
	n = acosExtendedCases + 30;
	printTestSetSize("acos", n, acosExtendedCases, os);
	printTestSet("acosTestSet", n, acosExtendedCases, acosTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("acos", n, acosExtendedCases, acosTestSet, acos_fo, os,
		true, acosRegExpected);

	delete [] acosRegExpected;
	delete [] acosTestSet;
  
	// -----
	// atan()
	// -----
	int atanExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> atanExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *atanRegExpected = mkRegResults(k);
  		filib::atan_fo<double,filib::native_switched,filib::i_mode_extended> atan_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *atanTestSet = 
		mkStdFunTestSet(k++, atanExtendedCases, atanExtTestSet, "atan", atan_fo);

	n = atanExtendedCases + 30;
	printTestSetSize("atan", n, atanExtendedCases, os);
	printTestSet("atanTestSet", n, atanExtendedCases, atanTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("atan", n, atanExtendedCases, atanTestSet, atan_fo, os,
		true, atanRegExpected);

	delete [] atanRegExpected;
	delete [] atanTestSet;
  
	// ------
	// acot()
	// ------
	int acotExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> acotExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acotRegExpected = mkRegResults(k);
    		filib::acot_fo<double,filib::native_switched,filib::i_mode_extended> acot_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acotTestSet = 
	mkStdFunTestSet(k++, acotExtendedCases, acotExtTestSet, "acot", acot_fo);
  
	n = acotExtendedCases + 30;
	printTestSetSize("acot", n, acotExtendedCases, os);
	printTestSet("acotTestSet", n, acotExtendedCases, acotTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("acot", n, acotExtendedCases, acotTestSet, acot_fo, os,
		true, acotRegExpected);

	delete [] acotRegExpected;
	delete [] acotTestSet;
  
	// ------
	// sinh()
	// ------
	int sinhExtendedCases = 5;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> sinhExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sinhRegExpected = mkRegResults(k);
  		filib::sinh_fo<double,filib::native_switched,filib::i_mode_extended> sinh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sinhTestSet = 
		mkStdFunTestSet(k++, sinhExtendedCases, sinhExtTestSet, "sinh", sinh_fo);
  
	n = sinhExtendedCases + 30;
	printTestSetSize("sinh", n, sinhExtendedCases, os);
	printTestSet("sinhTestSet", n, sinhExtendedCases, sinhTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("sinh", n, sinhExtendedCases, sinhTestSet, sinh_fo, os,
		true, sinhRegExpected);

	delete [] sinhRegExpected;
	delete [] sinhTestSet;
  
	// ------
	// cosh()
	// ------
	int coshExtendedCases = 5;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> coshExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
	};
  
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *coshRegExpected = mkRegResults(k);  
  		filib::cosh_fo<double,filib::native_switched,filib::i_mode_extended> cosh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *coshTestSet = 
		mkStdFunTestSet(k++, coshExtendedCases, coshExtTestSet, "cosh", cosh_fo);
  
	n = coshExtendedCases + 30;
	printTestSetSize("cosh", n, coshExtendedCases, os);
	printTestSet("coshTestSet", n, coshExtendedCases, coshTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("cosh", n, coshExtendedCases, coshTestSet, cosh_fo, os,
		true, coshRegExpected);

	delete [] coshRegExpected;
	delete [] coshTestSet;
  
	// ------
	// tanh()
	// ------
	int tanhExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> tanhExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *tanhRegExpected = mkRegResults(k);
    		filib::tanh_fo<double,filib::native_switched,filib::i_mode_extended> tanh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *tanhTestSet = 
		mkStdFunTestSet(k++, tanhExtendedCases, tanhExtTestSet, "tanh", tanh_fo);
  
	n = tanhExtendedCases + 30;
	printTestSetSize("tanh", n, tanhExtendedCases, os);
	printTestSet("tanhTestSet", n, tanhExtendedCases, tanhTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("tanh", n, tanhExtendedCases, tanhTestSet, tanh_fo, os,
		true, tanhRegExpected);

	delete [] tanhRegExpected;
	delete [] tanhTestSet;
  
	// ------
	// coth()
	// ------
	int cothExtendedCases = 12;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> cothExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::min(), filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::fp_traits<double,filib::native_switched>::min()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),   
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cothRegExpected = mkRegResults(k);
    		filib::coth_fo<double,filib::native_switched,filib::i_mode_extended> coth_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *cothTestSet = 
		mkStdFunTestSet(k++, cothExtendedCases, cothExtTestSet, "coth", coth_fo);

	n = cothExtendedCases + 30;
	printTestSetSize("coth", n, cothExtendedCases, os);
	printTestSet("cothTestSet", n, cothExtendedCases, cothTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("coth", n, cothExtendedCases, cothTestSet, coth_fo, os,
		true, cothRegExpected);

	delete [] cothRegExpected;
	delete [] cothTestSet;

	// ------
	// asinh()
	// ------
	int asinhExtendedCases = 4;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> asinhExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *asinhRegExpected = mkRegResults(k);
  		filib::asinh_fo<double,filib::native_switched,filib::i_mode_extended> asinh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *asinhTestSet = 
		mkStdFunTestSet(k++, asinhExtendedCases, asinhExtTestSet, "asinh", asinh_fo);
  
	n = asinhExtendedCases + 30;
	printTestSetSize("asinh", n, asinhExtendedCases, os);
	printTestSet("asinhTestSet", n, asinhExtendedCases, asinhTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("asinh", n, asinhExtendedCases, asinhTestSet, asinh_fo, os,
		true, asinhRegExpected);

	delete [] asinhRegExpected;
	delete [] asinhTestSet;

	// ------
	// acosh()
	// ------
	int acoshExtendedCases = 8;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> acoshExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 1.1),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acoshRegExpected = mkRegResults(k);
    		filib::acosh_fo<double,filib::native_switched,filib::i_mode_extended> acosh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acoshTestSet = 
		mkStdFunTestSet(k++, acoshExtendedCases, acoshExtTestSet, "acosh", acosh_fo);
  
	n = acoshExtendedCases + 30;
	printTestSetSize("acosh", n, acoshExtendedCases, os);
	printTestSet("acoshTestSet", n, acoshExtendedCases, acoshTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("acosh", n, acoshExtendedCases, acoshTestSet, acosh_fo, os,
		true, acoshRegExpected);

	delete [] acoshRegExpected;
	delete [] acoshTestSet;

	// ------
	// atanh()
	// ------
	int atanhExtendedCases = 10;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> atanhExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 2.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *atanhRegExpected = mkRegResults(k);
  		filib::atanh_fo<double,filib::native_switched,filib::i_mode_extended> atanh_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *atanhTestSet = 
		mkStdFunTestSet(k++, atanhExtendedCases, atanhExtTestSet, "atanh", atanh_fo);
  
	n = atanhExtendedCases + 30;
	printTestSetSize("atanh", n, atanhExtendedCases, os);
	printTestSet("atanhTestSet", n, atanhExtendedCases, atanhTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("atanh", n, atanhExtendedCases, atanhTestSet, atanh_fo, os,
		true, atanhRegExpected);

	delete [] atanhRegExpected;
	delete [] atanhTestSet;
  
	// ------
	// acoth()
	// ------
	int acothExtendedCases = 21;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> acothExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 0.5),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acothRegExpected = mkRegResults(k);
    		filib::acoth_fo<double,filib::native_switched,filib::i_mode_extended> acoth_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *acothTestSet = 
		mkStdFunTestSet(k++, acothExtendedCases, acothExtTestSet, "acoth", acoth_fo);
  
	n = acothExtendedCases + 30;
	printTestSetSize("acoth", n, acothExtendedCases, os);
	printTestSet("acothTestSet", n, acothExtendedCases, acothTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("acoth", n, acothExtendedCases, acothTestSet, acoth_fo, os,
		true, acothRegExpected);

	delete [] acothRegExpected;
	delete [] acothTestSet;

	// -------
	// expm1()
	// -------
	int expm1ExtendedCases = 8;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> expm1ExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *expm1RegExpected = mkRegResults(k);
  		filib::expm1_fo<double,filib::native_switched,filib::i_mode_extended> expm1_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *expm1TestSet = 
		mkStdFunTestSet(k++, expm1ExtendedCases, expm1ExtTestSet, "expm1", expm1_fo);
  
	n = expm1ExtendedCases + 30;
	printTestSetSize("expm1", n, expm1ExtendedCases, os);
	printTestSet("expm1TestSet", n, expm1ExtendedCases, expm1TestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("expm1", n, expm1ExtendedCases, expm1TestSet, expm1_fo, os,
		true, expm1RegExpected);

	delete [] expm1RegExpected;
	delete [] expm1TestSet;
  
	// -------
	// log1p()
	// -------
	int log1pExtendedCases = 11;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> log1pExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log1pRegExpected = mkRegResults(k);
    		filib::log1p_fo<double,filib::native_switched,filib::i_mode_extended> log1p_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *log1pTestSet = 
		mkStdFunTestSet(k++, log1pExtendedCases, log1pExtTestSet, "log1p", log1p_fo);
  
	n = log1pExtendedCases + 30;
	printTestSetSize("log1p", n, log1pExtendedCases, os);
	printTestSet("log1pTestSet", n, log1pExtendedCases, log1pTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("log1p", n, log1pExtendedCases, log1pTestSet, log1p_fo, os,
		true, log1pRegExpected);

	delete [] log1pRegExpected;
	delete [] log1pTestSet;
  
	// -------
	// sqrt()
	// -------
	int sqrtExtendedCases = 6;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> sqrtExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sqrtRegExpected = mkRegResults(k);
    		filib::sqrt_fo<double,filib::native_switched,filib::i_mode_extended> sqrt_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sqrtTestSet = 
		mkStdFunTestSet(k++, sqrtExtendedCases, sqrtExtTestSet, "sqrt", sqrt_fo);
  
	n = sqrtExtendedCases + 30;
	printTestSetSize("sqrt", n, sqrtExtendedCases, os);
	printTestSet("sqrtTestSet", n, sqrtExtendedCases, sqrtTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("sqrt", n, sqrtExtendedCases, sqrtTestSet, sqrt_fo, os,
		true, sqrtRegExpected);

	delete [] sqrtRegExpected;
	delete [] sqrtTestSet;
  

	// -----
	// sqr()
	// -----
	int sqrExtendedCases = 6;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> sqrExtTestSet [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(filib::fp_traits<double,filib::native_switched>::ninfinity(), 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, filib::fp_traits<double,filib::native_switched>::infinity()),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sqrRegExpected = mkRegResults(k);
    		filib::sqr_fo<double,filib::native_switched,filib::i_mode_extended> sqr_fo;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> *sqrTestSet = 
		mkStdFunTestSet(k++, sqrExtendedCases, sqrExtTestSet, "sqr", sqr_fo);
  
	n = sqrExtendedCases + 30;
	printTestSetSize("sqr", n, sqrExtendedCases, os);
	printTestSet("sqrTestSet", n, sqrExtendedCases, sqrTestSet, os);

	UnFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("sqr", n, sqrExtendedCases, sqrTestSet, sqr_fo, os,
		true, sqrRegExpected);

	delete [] sqrRegExpected;
	delete [] sqrTestSet;

	// --------------------
	// pow() filib::interval<double,filib::native_switched,filib::i_mode_extended> ^ int
	// --------------------
	int powExtendedCases = 20;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> powTestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.2323, 32.12321),
   
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-3.0, -2.5),  
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-9.0, -3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 5.5),
    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.5, 100),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 5.0),
    
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-filib::primitive::zero_succ, filib::primitive::zero_succ),
	};

	int powTestSet2 [] = 
	{
		1,
		-2,
		0,
		1,
		-1,
		2,
		1000000,
		0,
		1,
		-1,
		3,
		-1000000,
		0,
		1,
		-1,
		-2,
		2,
		3,
		1000000,
		-1,
		//-----------------------
		1,
		-1,
		2,
		0,
		2,
		10,
		-10,
		100,
	};
  
	n = sizeof(powTestSet1)/sizeof(powTestSet1[0]);
	printTestSetSize("pow", n, powExtendedCases, os);
	printTestSet("powTestSet1", n, powExtendedCases, 
		powTestSet1, os);
	printTestSet("powTestSet2", n, powExtendedCases, 
		powTestSet2, os);

	filib::power_interval_integer_fo<double,filib::native_switched,filib::i_mode_extended> power_interval_integer_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, int, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("pow", n, powExtendedCases,
		powTestSet1, powTestSet2, power_interval_integer_fo, os);

	// -------------------------
	// pow() filib::interval<double,filib::native_switched,filib::i_mode_extended> ^ filib::interval<double,filib::native_switched,filib::i_mode_extended>
	// -------------------------
	int pow2ExtendedCases = 26;
	filib::interval<double,filib::native_switched,filib::i_mode_extended> pow2TestSet1 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.1, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 5.0),
	};

	filib::interval<double,filib::native_switched,filib::i_mode_extended> pow2TestSet2 [] = 
	{
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::EMPTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-10.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-0.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, -1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-5.0, -2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::NEG_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::POS_INFTY(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>::ENTIRE(),
		//-----------------------
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(2.0, 3.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(1.0, 1.1),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(0.0, 2.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-1.0, 1.0),
		filib::interval<double,filib::native_switched,filib::i_mode_extended>(-2.0, 3.0),
	};
  
	n = sizeof(pow2TestSet1)/sizeof(pow2TestSet1[0]);
	printTestSetSize("pow2", n, pow2ExtendedCases, os);
	printTestSet("pow2TestSet1", n, pow2ExtendedCases, 
		pow2TestSet1, os);
	printTestSet("pow2TestSet2", n, pow2ExtendedCases, 
		pow2TestSet2, os);

	filib::pow_interval_interval_fo<double,filib::native_switched,filib::i_mode_extended> pow_interval_interval_fo;
	BinFunTest<filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended>, filib::interval<double,filib::native_switched,filib::i_mode_extended> >
		("pow2", n, pow2ExtendedCases,
		pow2TestSet1, pow2TestSet2, pow_interval_interval_fo, os);
}
