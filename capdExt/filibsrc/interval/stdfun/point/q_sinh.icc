/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(Q_SINH_ICC)
#define Q_SINH_ICC

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	double q_sinh(double x)
	{
		double absx, h;
		int sgn;
		double res;

		if (fp_traits<double,K>::IsNaN(x))
		{
			if ( E )
				return fp_traits<double,K>::quiet_NaN();
			else
				{
					std::cerr << "filib: q_sinh called with NaN value." << std::endl;
					std::terminate();
				}
		}
		else 
		{
			if (x<0) {sgn=-1; absx=-x;}
			else     {sgn=1;  absx=x; }

			if (absx>filib_consts<double>::q_ex2a)
			{
				if ( E )
					return sgn*fp_traits<double,K>::infinity();
				else
					{
						std::cerr << "filib: q_sinh called with invalid argument." << std::endl;
						std::terminate();
					}
			}

			if (absx<2.5783798e-8) 
				res=x;
			else if (absx>=0.662) 
			{
				h=q_ep1<K,E>(absx);
				res=sgn*0.5*(h-1.0/h);
			}
			else
			{
				h=q_epm1(absx);
				res=sgn*0.5*(h+h/(h+1.0));
			}
		} 

		return(res);
	}
}
#endif
