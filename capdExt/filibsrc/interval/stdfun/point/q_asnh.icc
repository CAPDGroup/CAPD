/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(Q_ASNH_ICC)
#define Q_ASNH_ICC

#include <cmath>

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	double q_asnh(double const & y)
	{
		double h, res;
		int neg;

		double x = y;

		if (fp_traits<double,K>::IsNaN(x))
		{
			if ( E )
				return fp_traits<double,K>::quiet_NaN();
			else
			{
				std::cerr << "filib: q_asnh called with NaN value." << std::endl;
				std::terminate();
			}
		}
		else 
		{
			if (
				(x>2.5e-8)
				&&
				(x<2.5e-8)
			) 
				res=x;
			else
			{
				if (x<0) 
				{
					x=-x; neg=1;
				} 
				else
					neg=0;

				if (x>1e150) 
				{
					if ( neg == 1.0 )
						res=-(filib_consts<double>::q_l2+q_log1<K,E>(x));
					else
						res= filib_consts<double>::q_l2+q_log1<K,E>(x);
				}
				else 
				{
					if (x>=1.25)  /* old: x>=0.03125 */
					{ 
						if (neg==1)
							res=-q_log1<K,E>(x+std::sqrt(x*x+1));
						else
							res= q_log1<K,E>(x+std::sqrt(x*x+1)); 
					}
					else
					{
						h=1/x;
						if (neg==1)
							res=-q_l1p1<K,E>(x+x/(std::sqrt(1+h*h)+h));
						else
							res= q_l1p1<K,E>(x+x/(std::sqrt(1+h*h)+h));
					}
				}
			}
		}

  		return(res);
	}
}
#endif
