/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(Q_EP1_ICC)
#define Q_EP1_ICC

/* --------------------------------------------------------------------- */
/* - Computation of exp(x), table lookup method                        - */
/* - We use the idea of Mr. P.T.P. Tang                                - */
/* - Version without an argument check                                 - */
/* --------------------------------------------------------------------- */

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	double q_ep1(double const & x)
	{
		int j;
		long int n,m;
		double r,r1,r2,q,s;
		double res;

		/* Step 1: Special case  */
		if ((-filib_consts<double>::q_ext1<x) && (x<filib_consts<double>::q_ext1))                        /* |x|<2^-54 */
			res=x+1;
		else
		{ 
			if (filib_consts<double>::q_ex2a<x) 
			{
				std::cerr << "filib: q_coth called with out of range value." << std::endl;
				std::terminate();
			}
			else
			{ 
				if (x<filib_consts<double>::q_ex2b)
					res=0;                                        /* result: underflow */ 
				else
				{
					/* Step 2 */
					if (x>0)
						n=long_int_cast((x*filib_consts<double>::q_exil)+0.5);
					else
						n=long_int_cast((x*filib_consts<double>::q_exil)-0.5);          /* round (x)      */

					j=n % 32;                                   /* j=n mod 32     */

					if (j<0) 
						j+=32;                             /* We force j>=0  */

					m=(n-j)/32;
					r1=x-n*filib_consts<double>::q_exl1;
					r2=-(n*filib_consts<double>::q_exl2);

					/* Step 3 */
					r=r1+r2;
					q=(((filib_consts<double>::q_exa[4]*r+filib_consts<double>::q_exa[3])*r+filib_consts<double>::q_exa[2])*r+filib_consts<double>::q_exa[1])*r+filib_consts<double>::q_exa[0];
					q=r*r*q;
					q=r1+(r2+q);

					/* Step 4 */
					s=filib_consts<double>::q_exld[j]+filib_consts<double>::q_extl[j];
					res=(filib_consts<double>::q_exld[j]+(filib_consts<double>::q_extl[j]+s*q));
					res = ldexp(res,m);
				}
			}
		}
		return(res);
	}
}
#endif
