/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(Q_ATNH_ICC)
#define Q_ATNH_ICC

#include <interval/stdfun/point/q_log1.icc>

namespace filib
{
	template <rounding_strategy K, interval_mode E>
	double q_atnh(double x)
	{
		double absx, res; 

		if (fp_traits<double,K>::IsNaN(x))
		{
			if ( E )
				return fp_traits<double,K>::quiet_NaN();
			else
			{
				std::cerr << "filib: q_atnh called with NaN value." << std::endl;
				std::terminate();
			}
		}
		else
		{ 
			if ((x<=-1.0)||(1.0<=x))       
			{
				if ( E )
					return fp_traits<double,K>::quiet_NaN();
				else
					{
						std::cerr << "filib: q_atnh called with invalid argument." << std::endl;
						std::terminate();
					}
			}

			if (x<0) absx=-x; else absx=x;
			if (absx>=filib_consts<double>::q_at3i) res=0.5*q_log1<K,E>((1+absx)/(1-absx));
			else              res=0.5*q_l1p1<K,E>((2*absx)/(1-absx));
			if (x<0) res=-res;
		}

		return(res);
	}
}
#endif
