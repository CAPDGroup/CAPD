/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(Q_COT_ICC)
#define Q_COT_ICC

namespace filib
{
	template <rounding_strategy K, interval_mode E >
	double q_cot(double const & x)
	{
		double res;
		long int m,n,k;
		double ysq,y,q,s,c;


		/* Special cases  */
		if (fp_traits<double,K>::IsNaN(x))
		{
			if ( E )
				return fp_traits<double,K>::quiet_NaN();
			else
			{
				std::cerr << "filib: q_cot called with NaN value." << std::endl;
				std::terminate();
			}
		}
		else
		{
			if (
				(x<-filib_consts<double>::q_sint[2])
				||
				(x>filib_consts<double>::q_sint[2])
			)
			{
				if ( E )
					return fp_traits<double,K>::quiet_NaN();
				else
				{
					std::cerr << "filib: argument in q_cot out of range." << std::endl;
					std::cerr << "Argument is " << x <<
						" low is " << -filib_consts<double>::q_sint[2] <<
						" high is " << filib_consts<double>::q_sint[2] << std::endl;
					std::terminate();
				}
			}

			/* Argument reduction */
			if ((x>-filib_consts<double>::q_minr)&&(x<filib_consts<double>::q_minr))
			{
				if ( E )
					return fp_traits<double,K>::quiet_NaN();
				else {
					std::cerr << "filib: argument in q_cot out of range." << std::endl;
					std::terminate();
				}
			}
			else {
				y=x*filib_consts<double>::q_pi2i; 
				if (y>0) k=long_int_cast(y+0.5); else k=long_int_cast(y-0.5);
				y=q_rtrg<double>(x,k); 
				n=k%4; if (n<0) n+=4; m=n%2; 

				/* Approximation */
				ysq=y*y;

				/* Computation sine */
				if ((-filib_consts<double>::q_sint[3]<y)&&(y<filib_consts<double>::q_sint[3]))
				{
					if (n==0) s=y; 
					else s=-y;
				}
				else
				{
					q=ysq*(((((((filib_consts<double>::q_sins[5]*ysq)+filib_consts<double>::q_sins[4])
						*ysq+filib_consts<double>::q_sins[3])*ysq+filib_consts<double>::q_sins[2])*ysq+filib_consts<double>::q_sins[1])*ysq)+filib_consts<double>::q_sins[0]);

					if (n==0)
						s=y+y*q;
					else
						s=-(y+y*q);
				}  
 
				/* Computation cosine */
				q=ysq*ysq*(((((((filib_consts<double>::q_sinc[5]*ysq)+filib_consts<double>::q_sinc[4])
					*ysq+filib_consts<double>::q_sinc[3])*ysq+filib_consts<double>::q_sinc[2])*ysq+filib_consts<double>::q_sinc[1])*ysq)+filib_consts<double>::q_sinc[0]);
	
				if (ysq >= filib_consts<double>::q_sint[0])
					c=0.625+(0.375-(0.5*ysq)+q);
				else if (ysq >= filib_consts<double>::q_sint[1])
					c=0.8125+((0.1875-(0.5*ysq))+q);
				else
					c=1.0-(0.5*ysq - q);
				if (n==2) c=-c; 

				/* Computation cotangens */
				if (m==0) res=c/s;
				else      res=s/c;
			}
		}

	 	return(res);
	}
}
#endif
