/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(SQR_ICC)
#define SQR_ICC

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	interval<double,K,E> sqr(interval<double,K,E> const & x)
	{
		if ( E )
		{
			if (x.isEmpty()) 
				return interval<double,K,E>::EMPTY();
		}

		double rinf,rsup;
  
		if (x.isPoint()) 
		{
			if (x.inf()==0)
				rinf=rsup=0;
			else

				if (!E && fp_traits<double,K>::IsNaN(x.inf()))
				{
					std::cerr << "filib: q_sqr called with NaN value." << std::endl;
					std::terminate();
				}
				else if ( ! E && ((x.inf()<-filib_consts<double>::q_sqra)||(x.inf()>filib_consts<double>::q_sqra )))
				{
					std::cerr << "filib: q_sqr overflow." << std::endl;
					std::terminate();
				}
				else 
				{
					typedef double N;

					FILIB_DOWNWARD_MULTIPLIES(rinf,x.inf(),x.inf(),false);
					FILIB_UPWARD_MULTIPLIES(rsup,x.inf(),x.inf(),true);
				}
		}
		else
		{
				if (! E && fp_traits<double,K>::IsNaN(x.inf())) 
				{
					std::cerr << "filib: sqr called with NaN value." << std::endl;
					std::terminate();
				}
				else if (! E && (fp_traits<double,K>::IsNaN(x.sup() )))
				{
					std::cerr << "filib: sqr called with NaN value." << std::endl;
					std::terminate();
				}
				else
				{
					if (!E && ((x.inf()<-filib_consts<double>::q_sqra)||(x.sup()>filib_consts<double>::q_sqra)))
					{
						std::cerr << "filib: q_sqr overflow." << std::endl;
						std::terminate();
					}
					else 
					{
						typedef double N;

						if ( x.inf() == 0 )
						{
							rinf = 0;
							FILIB_UPWARD_MULTIPLIES(rsup,x.sup(),x.sup(),true);
						}
						else if ( x.inf() > 0 )
						{
							FILIB_DOWNWARD_MULTIPLIES(rinf,x.inf(),x.inf(),false);
							FILIB_UPWARD_MULTIPLIES(rsup,x.sup(),x.sup(),true);
						}
						else if ( x.sup() == 0 )
						{
							rinf = 0;
							FILIB_UPWARD_MULTIPLIES(rsup,x.inf(),x.inf(),true);
						}
						else if ( x.sup() < 0 )
						{
							FILIB_DOWNWARD_MULTIPLIES(rinf,x.sup(),x.sup(),false);
							FILIB_UPWARD_MULTIPLIES(rsup,x.inf(),x.inf(),true);
						}
						else
						{
							rinf = 0;

							if ( -x.inf() > x.sup() )
								FILIB_UPWARD_MULTIPLIES(rsup,x.inf(),x.inf(),true);
							else
								FILIB_UPWARD_MULTIPLIES(rsup,x.sup(),x.sup(),true);
						}
					}
				}
		}
  
		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
