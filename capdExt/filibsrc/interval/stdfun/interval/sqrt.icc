/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(SQRT_ICC)
#define SQRT_ICC

#include <interval/stdfun/point/q_sqrt.icc>

namespace filib 
{
	template <rounding_strategy K, interval_mode E > 
	interval<double,K,E> sqrt(interval<double,K,E> const & y)
	{
		interval<double,K,E> x = y;

		if ( E == i_mode_extended)
		{
			interval<double,K,E> SQRT_DOMAIN(0, fp_traits<double,K>::infinity());
			x = x.intersect(SQRT_DOMAIN);

			if (x.isEmpty())
				return interval<double,K,E>::EMPTY();
		}
		if ( E == i_mode_extended_flag)
		{
			interval<double,K,E> z = x.uncheckedIntersect(0,fp_traits<double,K>::infinity());

			if ( x != z )
				interval<double,K,E>::extended_error_flag = true;

			x = z;

			if (x.isEmpty())
				return interval<double,K,E>::EMPTY();
		}

		double rinf, rsup;

		if (x.isPoint()) 
		{ 
			if (x.inf()==0)
				rinf=rsup=0;
			else 
			{ 
				rinf=q_sqrt<K,E>(x.inf()); 
				rsup=primitive::succ(rinf);
				rinf=primitive::pred(rinf);
			}
		}
		else 
		{
				if (E && (x.inf() <= 0))
					rinf = 0;
				if (!E && (x.inf() == 0)) 
					rinf = 0;
				else 
					rinf=primitive::pred(q_sqrt<K,E>(x.inf()));
      
				rsup = x.sup() == 0 ? 0 : primitive::succ(q_sqrt<K,E>(x.sup()));
		}   

		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
