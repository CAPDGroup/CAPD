/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(EXP10_ICC)
#define EXP10_ICC

#include <interval/stdfun/point/q_ex10.icc>

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	interval<double,K,E> exp10(interval<double,K,E> const & x)
	{
		if ( E )
			if (x.isEmpty()) 
				return interval<double,K,E>::EMPTY();

		double rinf, rsup;

		if (x.isPoint())
		{ 
			if ((x.inf()>=0) && (x.inf()<=22) && (long_int_cast(x.inf())==x.inf()))
			{  
				rinf=q_ex10<K,E>(x.inf());
				rsup=rinf;
			}
			else if (x.inf()<=filib_consts<double>::q_extn)
			{ 
				rinf=0.0;
				rsup=filib_consts<double>::q_minr;
			}
			else 
			{ 
				rinf=q_ex10<K,E>(x.inf());
				rsup=rinf*filib_consts<double>::q_e10p;
				rinf*=filib_consts<double>::q_e10m;
			}
		}
		else
		{
			if (x.inf()<=filib_consts<double>::q_extn) 
				rinf=0.0;
			else if ((long_int_cast(x.inf())==x.inf()) && (x.inf()>=0) && (x.inf()<=22))
				rinf=q_ex10<K,E>(x.inf());
			else
				rinf=q_ex10<K,E>(x.inf())*filib_consts<double>::q_e10m;

			if (x.sup()<=filib_consts<double>::q_extn)
				rsup=filib_consts<double>::q_minr;
			else if ((long_int_cast(x.sup())==x.sup()) && (x.sup()>=0) && (x.sup()<=22))
				rsup=q_ex10<K,E>(x.sup());
			else  
				rsup=q_ex10<K,E>(x.sup())*filib_consts<double>::q_e10p;
		}   

		if (rinf<0.0) 
			rinf=0.0;
		if ((x.sup()<=0.0) && (rsup>1.0)) 
			rsup=1.0;
		if ((x.inf()>=0.0) && (rinf<1.0))
			rinf=1.0;

		if ( E )
			if (rinf == fp_traits<double,K>::infinity())
				rinf = fp_traits<double,K>::max();

		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
