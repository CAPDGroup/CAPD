/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(LOG1P_ICC)
#define LOG1P_ICC

#include <interval/stdfun/point/q_log1.icc>

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	interval<double,K,E> log1p(interval<double,K,E> const & y)
	{
		interval<double,K,E> x = y;

		if ( E == i_mode_extended)
		{
			interval<double,K,E> LOG1P_DOMAIN(-1, fp_traits<double,K>::infinity());
			x = x.intersect(LOG1P_DOMAIN);

			if (x.isEmpty())
				return interval<double,K,E>::EMPTY();
		}
		if ( E == i_mode_extended_flag )
		{
			interval<double,K,E> z = x.uncheckedIntersect(-1,fp_traits<double,K>::infinity());

			if ( x != z )
				interval<double,K,E>::extended_error_flag = true;

			x = z;

			if (x.isEmpty())
				return interval<double,K,E>::EMPTY();
		}
  
		double rinf,rsup;

		if (x.isPoint()) 
		{ 
			rinf=q_lg1p<K,E>(x.inf());

				if (E && fp_traits<double,K>::IsNaN(rinf))
					return interval<double,K,E>::NEG_INFTY();
				else
				{
					if (rinf>=0) 
					{
						rsup=rinf*filib_consts<double>::q_lgpp;
						rinf*=filib_consts<double>::q_lgpm;
					}
					else 
					{
						rsup=rinf*filib_consts<double>::q_lgpm;
						rinf*=filib_consts<double>::q_lgpp;
					}
				}
		}
		else 
		{
			rinf=q_lg1p<K,E>(x.inf());

			if (rinf>=0)
				rinf*=filib_consts<double>::q_lgpm;
			else
				rinf*=filib_consts<double>::q_lgpp;
    
				if (E && (x.sup() == fp_traits<double,K>::infinity() ) )
					rsup = fp_traits<double,K>::infinity();
				else
				{
					rsup=q_lg1p<K,E>(x.sup());

					if (rsup>=0)
						rsup*=filib_consts<double>::q_lgpp;
					else
						rsup*=filib_consts<double>::q_lgpm;
				}

			if ( E )
			{
				if (fp_traits<double,K>::IsNaN(rinf))
					rinf = fp_traits<double,K>::ninfinity();
				if (fp_traits<double,K>::IsNaN(rsup))
					rsup = fp_traits<double,K>::infinity();
			}
		}   

		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
