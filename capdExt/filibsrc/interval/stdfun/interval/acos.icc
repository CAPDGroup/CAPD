/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(ACOS_ICC)
#define ACOS_ICC

#include <interval/stdfun/point/q_atn1.icc>
#include <interval/stdfun/point/q_acos.icc>

namespace filib
{
	template <rounding_strategy K, interval_mode E>
	interval<double,K,E> acos(interval<double,K,E> const & y)
	{
		/*
		 copy for intersection
		 */
		interval<double,K,E> x = y;

		if ( E == i_mode_extended)
		{
			interval<double,K,E> ACOS_DOMAIN(-1, 1);
			x = x.intersect(ACOS_DOMAIN);
			if (x.isEmpty())
  			return interval<double,K,E>::EMPTY();
		}
		else if ( E == i_mode_extended_flag)
		{
			interval<double,K,E> ACOS_DOMAIN(-1, 1);
			interval<double,K,E> z = x.intersect(ACOS_DOMAIN);
			
			if ( x != z )
				interval<double,K,E>::extended_error_flag = true;
			
			x = z;
			if (x.isEmpty())
  			return interval<double,K,E>::EMPTY();
		}

		double rinf, rsup;
	
		if (x.isPoint())
		{ 
			rinf	 = q_acos<K,E>(x.inf());
			rsup 	 = rinf * filib_consts<double>::q_ccsp;
			rinf	*= filib_consts<double>::q_ccsm;
		}
		else
		{
			rinf	= q_acos<K,E>(x.sup())*filib_consts<double>::q_ccsm;
			rsup	= q_acos<K,E>(x.inf())*filib_consts<double>::q_ccsp;
		}   
	
		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
