/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(ASINH_ICC)
#define ASINH_ICC

#include <interval/stdfun/point/q_asnh.icc>

namespace filib
{
	template <rounding_strategy K, interval_mode E > 
	interval<double,K,E> asinh(interval<double,K,E> const & x)
	{
		fp_traits<double,K>::reset();

		if ( E )
			if (x.isEmpty()) 
				return interval<double,K,E>::EMPTY();

		double rinf,rsup;

		if (x.inf()==x.sup())             /* point interval */
		{ 
			if (x.inf()<0)
			{
				if (x.inf()>-filib_consts<double>::q_minr)
				{
					rinf=x.inf();
					rsup=primitive::succ(x.inf());
				}
				else
				{
					rinf=q_asnh<K,E>(x.inf());
					rsup=rinf*filib_consts<double>::q_asnm;
					rinf*=filib_consts<double>::q_asnp;
					if (rinf<x.inf()) rinf=x.inf();
				} 
			}
			else 
			{
				if (x.inf()<filib_consts<double>::q_minr)
				{         
					rsup=x.inf();
					if (x.inf()==0)
						rinf=0; 
					else
						rinf=primitive::pred(x.inf());
             			}
				else
				{
					rinf=q_asnh<K,E>(x.inf());
					rsup=rinf*filib_consts<double>::q_asnp;
					rinf*=filib_consts<double>::q_asnm;
					if (rsup>x.inf()) rsup=x.inf();
				}
			}
		}
		else
		{
			if (x.inf()<=0)
			{
				if (x.inf()>-filib_consts<double>::q_minr)
					rinf=x.inf();         /* includes the case x.inf()=0  */
				else
				{
					rinf=q_asnh<K,E>(x.inf())*filib_consts<double>::q_asnp;
					if (rinf<x.inf()) rinf=x.inf();
				}          
			}
			else  /* now x.inf()>0 */
			{
				if (x.inf()<filib_consts<double>::q_minr)
					rinf=primitive::pred(x.inf());      
				else 
					rinf=q_asnh<K,E>(x.inf())*filib_consts<double>::q_asnm;
			}

			if (x.sup()<0)
			{
				if (x.sup()>-filib_consts<double>::q_minr)
					rsup=primitive::succ(x.sup());
				else
					rsup=q_asnh<K,E>(x.sup())*filib_consts<double>::q_asnm;          
			}
			else  /* now x.sup()>=0 */
			{
				if (x.sup()<filib_consts<double>::q_minr)
					rsup=x.sup();         /* includes the case x.sup()=0 */    
				else
				{ 
					rsup=q_asnh<K,E>(x.sup())*filib_consts<double>::q_asnp;
					if (rsup>x.sup()) rsup=x.sup();
				}
			}
		}   

		return interval<double,K,E>(rinf,rsup);
	}
}
#endif
