/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(FILIB_TOOLS_ICC)
#define FILIB_TOOLS_ICC

#include <ieee/primitive.hpp>

namespace filib
{
	/*********************************************************************/
	/* replacement for function ldexp form math.h (libm.a)               */
	/*********************************************************************/

	/* only for normalised numbers ! */
	inline void power2(double & x, int const & k)
	{
		if (x!=0) 
		{
			/* 
				a_diee *test=(a_diee *) &x; 
				test->ieee.expo+=k; 
			*/

			a_diee		test;
			test.f		= x;
			test.ieee.expo += k;
			x 		= test.f;
		}
	}

	/*********************************************************************/
	/* replacement for function frexp form math.h (libm.a)               */
	/*********************************************************************/

	/* only for normalised numbers ! */
	inline void frexpo(double const & x, int & k)
	{
		if (x!=0) 
		{
			/*
				a_diee *test=(a_diee *) &x; 
				k=test->ieee.expo;
			*/
			a_diee		test;
			test.f		= x;
			k=test.ieee.expo;
		} 
		else 
			k=0;
	}
 
	/*********************************************************************/
	/* first 24 bits of a double value ( cut / round )                   */
	/*********************************************************************/

	inline float cut24(double const & x)
	{
		return static_cast<float>(x);
	}

	/*********************************************************************/
	/* assignment double -> long int                                     */
	/*********************************************************************/

	inline long int cutint(double const & x)
	{
		return static_cast<long int>(x);
	}
}
#endif
