/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
#if ! defined(INTERVAL_ICC)
#define INTERVAL_ICC

#include <cctype>

/**
 * open namespace filib
 **/
namespace filib
{
	/**
	 * unary operator +
	 **/
	template<typename N,rounding_strategy K,interval_mode E>
	interval<N,K,E> const & interval<N,K,E>::operator+() const
	{
		return *this;
	}

	/**
	 * unary operator -
	 **/
	template<typename N,rounding_strategy K,interval_mode E>
	interval<N,K,E> interval<N,K,E>::operator-() const
	{
		return interval<N,K,E>(-SUP,-INF);
	}

	/**
	 * provided for internal reasons,
	 * speed up construction where we don't
	 * need the usual sanity checks
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::interval(
		N const & rl,
		N const & ru,
		char const &
	) : INF(rl), SUP(ru) 
	{
		if ( E == i_mode_extended_flag && ( FILIB_ISNAN(rl) || FILIB_ISNAN(ru) ) )
			interval<N,K,E>::extended_error_flag = true;
	}
	
	/**
	 * constructor by strings using pred/succ
	 **/
	template <typename N,rounding_strategy K,interval_mode E>
	inline interval<N,K,E>::interval(
		std::string const & infs, std::string const & sups
	) throw(interval_io_exception)
		: 
		INF(inferFromString<N,false>(infs)),
		SUP(inferFromString<N,true> (sups))
	{
		checkInf();

		if ( E == i_mode_extended_flag && ( FILIB_ISNAN(INF) || FILIB_ISNAN(SUP) ) )
			interval<N,K,E>::extended_error_flag = true;
		if ( E == i_mode_extended_flag && ( FILIB_ISINF(INF) || FILIB_ISINF(SUP) ) )
			interval<N,K,E>::extended_error_flag = true;
	}

	/**
	 * check for infinity point intervals
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline void interval<N,K,E>::checkInf()
	{
		if ( E )
		{
			if ( SUP < -FILIB_MAX )
			{
				SUP = -FILIB_MAX;
				if ( E == i_mode_extended_flag )
					interval<N,K,E>::extended_error_flag = true;
			}
			/* interval is [+inf,+inf], set to [+max,+inf] */
			else if ( INF > FILIB_MAX )
			{
				INF = FILIB_MAX;
				if ( E == i_mode_extended_flag )
					interval<N,K,E>::extended_error_flag = true;
			}
		}
	}

	/**
	 * default constructor,
	 * don't use it if you are not the STL
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::interval() 
	: INF(0.0), SUP(0.0) 
	{
	}

	/**
	 * constructor by values
	 * rl: infimum
	 * ru: supremum
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::interval(N const & rl, N const & ru)
	: INF(rl), SUP(ru)
	{
		if ( E )
		{
			if ( INF <= SUP )
			{
				checkInf();
				if ( E == i_mode_extended_flag && (FILIB_ISNAN(INF) || FILIB_ISNAN(SUP)) )
					interval<N,K,E>::extended_error_flag = true;
				if ( E == i_mode_extended_flag && (FILIB_ISINF(INF) || FILIB_ISINF(SUP)) )
					interval<N,K,E>::extended_error_flag = true;
			}
			else
			{
				INF = SUP = FILIB_QUIET_NAN;

				if ( E == i_mode_extended_flag )
					interval<N,K,E>::extended_error_flag = true;
			}
		}
	}

	/**
	 * constructor for point interval
	 * rp: point
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::interval(N const & rp)
	: INF(rp), SUP(rp)
	{
		if ( E )
			checkInf();

		if ( E == i_mode_extended_flag && (FILIB_ISNAN(rp)) )
			interval<N,K,E>::extended_error_flag = true;
	}

	/**
	 * copy constructor
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::interval(interval<N,K,E> const & o)
	: INF(o.INF), SUP(o.SUP)
	{
	}

	/**
	 * destructor
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E>::~interval() {}

	/**
	 * assignment operator
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> & interval<N,K,E>::operator= (interval<N,K,E> const & o)
	{
		/**
		 * this check is not needed here
		 * case 1: this == &o, we do unnecessary
		 *         copying that doesn't hurt
		 * case 2: this != &o
		 *
		 * case 1 is shouln't happen too often
		 * so we should normally gain performance
		 * by leaving away this check
		 **/
		#if ! defined(FILIB_CHECK_COPY)
		if ( this != &o )
		#endif
		{
			INF = o.INF;
			SUP = o.SUP;
		}
		return *this;
	}

	/**
	 * return infimum
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline N const & interval<N,K,E>::inf() const
	{
		return INF;
	}
	/**
	 * return supremum
	 **/
	template <typename N, rounding_strategy K, interval_mode E>
	inline N const & interval<N,K,E>::sup() const
	{
		return SUP;
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline bool interval<N,K,E>::isEmpty() const
	{
		if ( E )
			return FILIB_ISNAN(INF);
		else
		{
			std::cerr << "filib: Can not call isEmpty for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline bool isEmpty(interval<N,K,E> const & a)
	{
		return a.isEmpty();
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline bool interval<N,K,E>::isPoint() const
	{
		return INF == SUP;
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline bool isPoint(interval<N,K,E> const & a)
	{
		return a.isPoint();
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline bool interval<N,K,E>::isInfinite() const
	{
		if ( E )
			return FILIB_ISINF(INF) || FILIB_ISINF(SUP);
		else
		{
			std::cerr << "filib: Can not call isInfinite for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline bool isInfinite(interval<N,K,E> const & a)
	{
		return a.isInfinite();
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::EMPTY()
	{
		if ( E )
		{
			if ( E == i_mode_extended_flag )
				interval<N,K,E>::extended_error_flag = true;

			return 
			interval<N,K,E>(
				FILIB_QUIET_NAN,
				FILIB_QUIET_NAN,
				'-');
		}
		else
		{
			std::cerr << "filib: Can not call EMPTY for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::NEG_INFTY()
	{
		if ( E )
		{
			if ( E == i_mode_extended_flag )
				interval<N,K,E>::extended_error_flag = true;

			return
				interval<N,K,E>(
					FILIB_NINFINITY,
					-FILIB_MAX,
					'-');
		}
		else
		{
			std::cerr << "filib: Can not call NEG_INFTY for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::POS_INFTY()
	{
		if ( E )
		{
			if ( E == i_mode_extended_flag )
				interval<N,K,E>::extended_error_flag = true;
			return 
				interval<N,K,E>(
					FILIB_MAX,
					FILIB_INFINITY,
					'-');
		}
		else
		{
			std::cerr << "filib: Can not call POS_INFTY for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::ENTIRE()
	{
		if ( E )
		{
			if ( E == i_mode_extended_flag )
				interval<N,K,E>::extended_error_flag = true;

			return interval<N,K,E>(
				FILIB_NINFINITY,
				FILIB_INFINITY,
				'-');
		}
		{
			std::cerr << "filib: Can not call ENTIRE for non extended interval." << std::endl;
			std::terminate();
		}
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::PI()
	{
		return interval<N,K,E>(
				FILIB_L_PI,
				FILIB_U_PI,
				'-');
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::ZERO()
	{
		return interval<N,K,E>(0.0,0.0,'-');
	}

	template<typename N,rounding_strategy K,interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::ONE()
	{
		return interval<N,K,E>(1.0,1.0,'-');
	}

	#include <interval/interval_arith.icc>

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> operator/(
		N const & b,
		interval<N,K,E> const & a)
	{
		return interval<N,K,E>(b)/a;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N const & inf(interval<N,K,E> const & a)
	{
		return a.inf();
	}
	template <typename N, rounding_strategy K, interval_mode E>
	inline N const & sup(interval<N,K,E> const & a)
	{
		return a.sup();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N inf_by_value(interval<N,K,E> const & a)
	{
		return inf<N,K,E>(a);
	}
	template <typename N, rounding_strategy K, interval_mode E>
	inline N sup_by_value(interval<N,K,E> const & a)
	{
		return sup<N,K,E>(a);
	}


	template <typename N, rounding_strategy K, interval_mode E>
	inline bool interval<N,K,E>::hasUlpAcc(unsigned int const & n) const
	{
			if ( E && isInfinite() )
				return false;
			else
			{
				N x = INF;
				unsigned int i = 0;
				
				while ( i++ < n && x < SUP )
					x = primitive::succ(x);

				return x == SUP;
			}
	}
	template <typename N, rounding_strategy K, interval_mode E>
	inline bool hasUlpAcc(interval<N,K,E> const & a, unsigned int const & n)
	{
		return a.hasUlpAcc(n);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline bool interval<N,K,E>::isExtended()
	{
		if ( E )
			return true;
		else
			return false;
	}
	
	template <typename N, rounding_strategy K, interval_mode E>
	inline N interval<N,K,E>::mid() const
	{
 		if ( isPoint() )
			return INF;
		else if ( FILIB_ABS(INF) == FILIB_ABS(SUP) )
			return static_cast<N>(0.0);
		else
			return 
				static_cast<N>(0.5) * INF +
				static_cast<N>(0.5) * SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N mid(interval<N,K,E> const & a)
	{
		return a.mid();
	}


	template <typename N, rounding_strategy K, interval_mode E>
	inline N diam(interval<N,K,E> const & a)
	{
		return a.diam();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N width(interval<N,K,E> const & a)
	{
		return a.width();
	}


	template <typename N, rounding_strategy K, interval_mode E>
	inline N relDiam(interval<N,K,E> const & a)
	{
		return a.relDiam();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N rad(interval<N,K,E> const & a)
	{
		return a.rad();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N interval<N,K,E>::mig() const
	{
		if ( contains(static_cast<N>(0.0)) )
			return static_cast<N>(0.0);
		else
			return std::min(FILIB_ABS(INF),FILIB_ABS(SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N mig(interval<N,K,E> const & a)
	{
		return a.mig();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N interval<N,K,E>::mag() const
	{
			return std::max(FILIB_ABS(INF),FILIB_ABS(SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline N mag(interval<N,K,E> const & a)
	{
		return a.mag();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::abs() const
	{
		return interval<N,K,E>(mig(),mag());
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> abs(interval<N,K,E> const & a)
	{
		return a.abs();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::imin(interval<N,K,E> const & a) const
	{
			if ( E && isEmpty() )
				return a;
			else if ( E && a.isEmpty() )
				return *this;
			else
				return interval<N,K,E>(
					std::min(INF,a.INF),std::min(SUP,a.SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> imin(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.imin(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> interval<N,K,E>::imax(interval<N,K,E> const & a) const
	{
			if ( E && isEmpty() )
				return a;
			else if ( E && a.isEmpty() )
				return *this;
			else
				return interval<N,K,E>(
					std::max(INF,a.INF),std::max(SUP,a.SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline interval<N,K,E> imax(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.imax(b);
	}


	template <typename N, rounding_strategy K, interval_mode E>
	inline N dist(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.dist(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::blow(N const & eps) const
	{
		interval<N,K,E> res = 
			(static_cast<N>(1.0)+eps) * *this - eps * *this;
		res.INF = primitive::pred(res.INF);
		res.SUP = primitive::succ(res.SUP);

		if ( E == i_mode_extended_flag && (FILIB_ISINF(res.INF) || FILIB_ISINF(res.SUP)) )
			interval<N,K,E>::extended_error_flag = true;
		
		return res;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> blow(interval<N,K,E> const & a, N const & eps)
	{
		return a.blow(eps);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::intersect(interval<N,K,E> const & a) const
	{
			if ( E && ( isEmpty() || a.isEmpty() ) )
			{
				if ( E == i_mode_extended_flag )
					interval<N,K,E>::extended_error_flag = true;
				return EMPTY();
			}
			else
				return interval<N,K,E>(std::max(INF,a.INF),std::min(SUP,a.SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> intersect(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.intersect(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::hull(interval<N,K,E> const & a) const
	{
			if ( E && isEmpty() )
				return a;
			else if ( E && a.isEmpty())
				return *this;
			else
				return interval<N,K,E>(std::min(INF, a.INF), std::max(SUP, a.SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::interval_hull(interval<N,K,E> const & a) const
	{
		return hull(a);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> hull(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval_hull(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::hull(N const & a) const
	{
			if (E && isEmpty())
				return interval<N,K,E>(a);
			else if (E && FILIB_ISNAN(a))
				return *this;
			else
				return interval<N,K,E>(std::min(INF, a), std::max(SUP, a));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::interval_hull(N const & a) const
	{
		return hull(a);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> hull(interval<N,K,E> const & a, N const & b)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval_hull(interval<N,K,E> const & a, N const & b)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> hull(N const & b, interval<N,K,E> const & a)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval_hull(N const & b, interval<N,K,E> const & a)
	{
		return a.hull(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> hull(N const & a, N const & b)
	{
			if ( E && FILIB_ISNAN(a) )
				return interval<N,K,E>(b);
			else if ( E && FILIB_ISNAN(b) )
				return interval<N,K,E>(a);
			else
			{
				if ( a <= b )
					return interval<N,K,E>(a,b);
				else
					return interval<N,K,E>(b,a);
			}
	}

	template <typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval_hull(N const & a, N const & b)
	{
		return hull(a,b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::disjoint(interval<N,K,E> const & a) const
	{
		return ! (INF <= a.SUP && a.INF <= SUP);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool disjoint(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.disjoint(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::contains(N a) const
	{
		return INF <= a && a <= SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool in(N const & a, interval<N,K,E> const & b)
	{
		return b.contains(a);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::interior(interval<N,K,E> const & a) const
	{
		if ( E )
			return a.INF < INF && SUP < a.SUP  || isEmpty();
		else
			return a.INF < INF && SUP < a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interior(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.interior(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::proper_subset(interval<N,K,E> const & a) const
	{
		if ( E )
			return (INF >= a.INF && SUP <= a.SUP && (INF > a.INF || SUP < a.SUP)) ||
				(isEmpty() && ! a.isEmpty());
		else
			return (INF >= a.INF && SUP <= a.SUP && (INF > a.INF || SUP < a.SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool proper_subset(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.proper_subset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::subset(interval<N,K,E> const & a) const
	{
		if ( E )
			return a.INF <= INF && SUP <= a.SUP || isEmpty();
		else
			return a.INF <= INF && SUP <= a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool subset(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.subset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool operator<=(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.subset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::proper_superset(interval<N,K,E> const & a) const
	{
		if ( E )
			return (INF <= a.INF && a.SUP <= SUP && (INF < a.INF || a.SUP < SUP)) ||
				(a.isEmpty() && ! isEmpty());
		else
			return (INF <= a.INF && a.SUP <= SUP && (INF < a.INF || a.SUP < SUP));
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool proper_superset(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.proper_superset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::superset(interval<N,K,E> const & a) const
	{
		if ( E )
			return INF <= a.INF && a.SUP <= SUP || a.isEmpty();
		else
			return INF <= a.INF && a.SUP <= SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool superset(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.superset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool operator >=(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.superset(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::seq(interval<N,K,E> const & a) const
	{
		if ( E )
			return INF == a.INF && SUP == a.SUP || isEmpty() && a.isEmpty();
		else
			return INF == a.INF && SUP == a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool seq(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.seq(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool operator ==(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.seq(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::sne(interval<N,K,E> const & a) const
	{
		return !seq(a);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool sne(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.sne(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool operator !=(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.sne(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::sge(interval<N,K,E> const & a) const
	{
		if ( E )
			return INF >= a.INF && SUP >= a.SUP || isEmpty() && a.isEmpty();
		else
			return INF >= a.INF && SUP >= a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool sge(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.sge(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::sgt(interval<N,K,E> const & a) const
	{
		return INF > a.INF && SUP > a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool sgt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.sgt(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::sle(interval<N,K,E> const & a) const
	{
		if ( E )
			return INF <= a.INF && SUP <= a.SUP || isEmpty() && a.isEmpty();
		else
			return INF <= a.INF && SUP <= a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool sle(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.sle(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::slt(interval<N,K,E> const & a) const
	{
		return INF < a.INF && SUP < a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool slt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.slt(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::ceq(interval<N,K,E> const & a) const
	{
		return SUP <= a.INF && INF >= a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool ceq(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.ceq(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::cne(interval<N,K,E> const & a) const
	{
		return ! (INF <= a.SUP && a.INF <= SUP);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool cne(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.cne(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::cge(interval<N,K,E> const & a) const
	{
		return INF >= a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool cge(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.cge(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::cgt(interval<N,K,E> const & a) const
	{
		return INF > a.SUP;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool cgt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.cgt(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::cle(interval<N,K,E> const & a) const
	{
		return SUP <= a.INF;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool cle(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.cle(b);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::clt(interval<N,K,E> const & a) const
	{
		return SUP < a.INF;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	bool clt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.clt(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::peq(interval<N,K,E> const & a) const
	{
		return INF <= a.SUP && SUP >= a.INF;
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool peq(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.peq(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::pne(interval<N,K,E> const & a) const
	{
		return ! (SUP <= a.INF && INF >= a.SUP);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool pne(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.pne(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::pge(interval<N,K,E> const & a) const
	{
		return SUP >= a.INF;
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool pge(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.pge(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::pgt(interval<N,K,E> const & a) const
	{
		return SUP > a.INF;
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool pgt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.pgt(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::ple(interval<N,K,E> const & a) const
	{
		return INF <= a.SUP;
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool ple(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.ple(b);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	bool interval<N,K,E>::plt(interval<N,K,E> const & a) const
	{
		return INF < a.SUP;
	}

  template <typename N, rounding_strategy K, interval_mode E>
	bool plt(interval<N,K,E> const & a, interval<N,K,E> const & b)
	{
		return a.plt(b);
	}

  template <typename N, rounding_strategy K, interval_mode E>
	std::ostream & interval<N,K,E>::bitImage(std::ostream & os) const
	{
		os << "[ ";
		primitive::basicBitImage(INF,os);
		os << " ," << "\n" << "  ";
		primitive::basicBitImage(SUP,os);
		os << " ]" << "\n";
		return os;
	}

        template <typename N, rounding_strategy K, interval_mode E>
	std::ostream & interval<N,K,E>::hexImage(std::ostream & os) const
	{
		os << "[ ";
		primitive::basicHexImage(INF,os);
		os << " ," << "\n" << "  ";
		primitive::basicHexImage(SUP,os);
		os << " ]" << "\n";
		return os;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	inline std::ostream & corebench_out (
		std::ostream & out,
		interval<N,K,E> const & obj)
	{
		out << "(";

		switch(K)
		{
			case native_switched:
				out << "native_switched";
				break;
			case native_directed:
				out << "native_directed";
				break;
			case multiplicative:
				out << "multiplicative";
				break;
			case no_rounding:
				out << "no_rounding";
				break;
			case pred_succ_rounding:
				out << "pred_succ_rounding";
				break;
			default:
				out << "unknown";
				break;
		}
		
		out << ")";	
		out << "[" << " " << obj.inf() << " ; " << obj.sup() << " " << "]";
		return out;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	std::ostream &operator <<(std::ostream &os, interval<N,K,E> const & x) 
	{
			if (E && x.isEmpty())
				os << "[ EMPTY ]";
			else if (E && (x == interval<N,K,E>::constructIntervalNoChecks(FILIB_NINFINITY,-FILIB_MAX)) )
				os << "[ -INFTY ]";
			else if (E && (x == interval<N,K,E>::constructIntervalNoChecks(FILIB_MAX,FILIB_INFINITY)) )
				os << "[ +INFTY ]";
			else if (E && (x == interval<N,K,E>::constructIntervalNoChecks(FILIB_NINFINITY,FILIB_INFINITY)) )
				os << "[ ENTIRE ]";
			else if (!E && (!(primitive::isRegular(x.inf()) && primitive::isRegular(x.sup())) || 
					x.inf() > x.sup()))
					os << "[ UNDEFINED ]";
			else
			{
				int old_dec = os.precision();
				os.precision(interval<N,K,E>::precision());
				os << '[' << x.inf() << ", " << x.sup() << ']';
				os.precision(old_dec);
			}
		return os;
	}

	template <typename N, rounding_strategy K, interval_mode E>
	int const & interval<N,K,E>::precision()
	{
		return fp_traits<N,K>::precision();
	}

	template <typename N, rounding_strategy K, interval_mode E>
	int interval<N,K,E>::precision(int const & prec)
	{
		return fp_traits<N,K>::precision(prec);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	N interval<N,K,E>::amin() const
	{
			if ( E && ( (FILIB_ISNAN(INF)) || (FILIB_ISNAN(SUP)) ) )
				return FILIB_QUIET_NAN;
			else
				return std::min(INF < N() ? -INF : INF,SUP < N() ? -SUP : SUP);
	}

        template <typename N, rounding_strategy K, interval_mode E>
	N interval<N,K,E>::amax() const
	{
			if ( E && ( (FILIB_ISNAN(INF)) || (FILIB_ISNAN(SUP)) ) )
				return FILIB_QUIET_NAN;
			else
				return std::max(INF < N() ? -INF : INF,SUP < N() ? -SUP : SUP);
	}

	template<typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::readBitImage(std::istream & in)
		throw(interval_io_exception)
	{
		eatWS< whitespace<char> >(in);

		readChar(in,'[');
		eatWS< whitespace<char> >(in);
		N left = constructFromBitSet<N>(in);
		eatWS< whitespace<char> >(in);
		readChar(in,',');
		eatWS< whitespace<char> >(in);
		N righ = constructFromBitSet<N>(in);
		eatWS< whitespace<char> >(in);
		readChar(in,']');

		return interval<N,K,E>(left,righ);
	}

	template<typename N, rounding_strategy K, interval_mode E>
	interval<N,K,E> interval<N,K,E>::readHexImage(std::istream & in)
		throw(interval_io_exception)
	{
		eatWS< whitespace<char> >(in);

		readChar(in,'[');
		eatWS< whitespace<char> >(in);
		N left = constructFromHexSet<N>(in);
		eatWS< whitespace<char> >(in);
		readChar(in,',');
		eatWS< whitespace<char> >(in);
		N righ = constructFromHexSet<N>(in);
		eatWS< whitespace<char> >(in);
		readChar(in,']');

		return interval<N,K,E>(left,righ);
	}

	template <typename N, rounding_strategy K, interval_mode E>
	std::istream &operator >>(std::istream &is, interval<N,K,E> &x)
	throw(interval_io_exception)
	{
		N inf, sup;
		std::string s;

		eatWS< whitespace<char> >(is);
		readChar(is,'[');
		eatWS< whitespace<char> >(is);

		char ch = is.get();

		while ( (!isspace(ch)) && (ch != ',') && (ch != ']') )
		{
			s += ch;
			ch = is.get();
		}

		is.putback(ch);

		if ( E && (s == "-INFTY") )
		{
			eatWS< whitespace<char> >(is);
			readChar(is,']');
			x = interval<N,K,E>::NEG_INFTY();
		}
		else if ( E && ( s == "+INFTY" ) )
		{
			eatWS< whitespace<char> >(is);
			readChar(is,']');
			x = interval<N,K,E>::POS_INFTY();
		}
		else if ( E && ( s == "ENTIRE" ) )
		{
			eatWS< whitespace<char> >(is);
			readChar(is,']');
			x = interval<N,K,E>::ENTIRE();
		}
		else if ( E && ( s == "EMPTY" ) )
		{
			eatWS< whitespace<char> >(is);
			readChar(is,']');
			x = interval<N,K,E>::EMPTY();
		}
		else
		{
			if ( s == "UNDEFINED" )
			{
				eatWS< whitespace<char> >(is);
				readChar(is,']');
				x = interval<N,K,E>::EMPTY();
			}
			else
			{
				char * endptr = 0;
				char const * nptr = s.c_str();
				inf = strtod(s.c_str(),&endptr);

				if ( endptr != (nptr+s.length()) )
					throw interval_io_exception(std::string("Failed parsing infimum, wanted value, got ")+s+" .");

				eatWS< whitespace<char> >(is);
				readChar(is,',');
				eatWS< whitespace<char> >(is);
			
				s="";

				ch = is.get();
	
				while ( (!isspace(ch)) && (ch != ']') )
				{
					s += ch;
					ch = is.get();
				}

				is.putback(ch);

				nptr = s.c_str();

				sup = strtod(s.c_str(),&endptr);
	
				if ( endptr != (nptr+s.length()) )
					throw interval_io_exception(std::string("Failed parsing supremum, wanted value, got ")+s+" .");

				eatWS< whitespace<char> >(is);
				readChar(is,']');

				if (!(is.fail() || is.bad())) 
				{
					x = interval<N,K,E>(inf, sup);
				}
			}
		}
    
		return is;
	}
}
#endif
