/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wix87nschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
	TEMPLATE_EMPTY
	inline void filib::fp_traits<double,filib::multiplicative>::setup()
	{
		::filib::x87::x87doubleroundnear();
	}
	TEMPLATE_EMPTY
	inline void filib::fp_traits<double,filib::multiplicative>::reset()
	{
		::filib::x87::x87doubleroundnear();
	}

	TEMPLATE_EMPTY
	inline filib::fp_traits<double,filib::multiplicative>::fp_traits()
	{
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::upward_plus(
			double const & op1,
			double const & op2
		)
	{
		return high(::filib::x87::x87add(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::downward_plus(
			double const & op1,
			double const & op2
		)
	{
		return low(::filib::x87::x87add(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tozero_plus(
			double const &,
			double const &
		)
	{
		std::cerr << "filib.0: filib::fp_traits<double,filib::multiplicative>::tozero_plus"
			  << std::endl
			  << "is not supported for multiplicative rounding."
			  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tonearest_plus(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87add(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::upward_minus(
			double const & op1,
			double const & op2
		)
	{
		return high(::filib::x87::x87sub(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::downward_minus(
			double const & op1,
			double const & op2
		)
	{
		return low(::filib::x87::x87sub(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tozero_minus(
			double const &,
			double const &
		)
	{
		std::cerr << "filib.0: filib::fp_traits<double,filib::multiplicative>::tozero_minus"
			  << std::endl
			  << "is not supported for multiplicative rounding."
			  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tonearest_minus(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87sub(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::upward_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return high(::filib::x87::x87mul(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::downward_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return low(::filib::x87::x87mul(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tozero_multiplies(
			double const &,
			double const &
		)
	{
		std::cerr << "filib.0: filib::fp_traits<double,filib::multiplicative>::tozero_multiplies"
			  << std::endl
			  << "is not supported for multiplicative rounding."
			  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tonearest_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87mul(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::upward_divides(
			double const & op1,
			double const & op2
		)
	{
		return high(::filib::x87::x87div(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::downward_divides(
			double const & op1,
			double const & op2
		)
	{
		return low(::filib::x87::x87div(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tozero_divides(
			double const &,
			double const &
		)
	{
		std::cerr << "filib.0: filib::fp_traits<double,filib::multiplicative>::tozero_divides"
			  << std::endl
			  << "is not supported for multiplicative rounding."
			  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::multiplicative>::tonearest_divides(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87div(op1,op2,false);
	}
	TEMPLATE_EMPTY
	inline double filib::fp_traits<double,filib::multiplicative>::low(
			double const & v
		)
	{
		if ( primitive::isdenormorzero(v) )
		{
			if ( v > 0.0 )
				return 0.0;
			else 
				return primitive::zero_pred;
		}
		else if ( v > 0.0 )
			return (v * primitive::one_pred);
		else
			return (v * primitive::one_succ);
	}
	TEMPLATE_EMPTY
	inline double filib::fp_traits<double,filib::multiplicative>::high(
			double const & v
		)
	{
		if ( primitive::isdenormorzero(v) )
		{
			if ( v < 0.0 )
				return 0.0;
			else
				return primitive::zero_succ;
		}
		else if ( v > 0.0 )
			return (v * primitive::one_succ);
		else
			return (v * primitive::one_pred);
	}
