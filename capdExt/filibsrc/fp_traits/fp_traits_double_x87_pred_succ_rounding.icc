/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wix87nschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
	TEMPLATE_EMPTY
	inline void filib::fp_traits<double,filib::pred_succ_rounding>::setup()
	{
		::filib::x87::x87doubleroundnear();
	}
	TEMPLATE_EMPTY
	inline void filib::fp_traits<double,filib::pred_succ_rounding>::reset()
	{
		::filib::x87::x87doubleroundnear();
	}

	TEMPLATE_EMPTY
	inline filib::fp_traits<double,filib::pred_succ_rounding>::fp_traits()
	{
	}

	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::upward_plus(
			double const & op1,
			double const & op2
		)
	{
		return op1 == -op2 ? 0.0 : primitive::succ(::filib::x87::x87add(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::downward_plus(
			double const & op1,
			double const & op2
		)
	{
		return op1 == -op2 ? 0.0 : primitive::pred(::filib::x87::x87add(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tozero_plus(
			double const &,
			double const &
		)
	{
		std::cerr << "fp_traits<>::tozero_plus is not supported for "
			  << "primitive (non-native) rounding."  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tonearest_plus(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87add(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::upward_minus(
			double const & op1,
			double const & op2
		)
	{
		return op1 == op2 ? 0.0 : primitive::succ(::filib::x87::x87sub(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::downward_minus(
			double const & op1,
			double const & op2
		)
	{
		return op1 == op2 ? 0.0 : primitive::pred(::filib::x87::x87sub(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tozero_minus(
			double const &,
			double const &
		)
	{
		std::cerr << "fp_traits<>::tozero_minus is not supported for "
			  << "primitive (non-native) rounding."  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tonearest_minus(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87sub(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::upward_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return primitive::succ(::filib::x87::x87mul(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::downward_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return primitive::pred(::filib::x87::x87mul(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tozero_multiplies(
			double const &,
			double const &
		)
	{
		std::cerr << "fp_traits<>::tozero_multiplies is not supported for "
			  << "primitive (non-native) rounding."  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tonearest_multiplies(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87mul(op1,op2,false);
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::upward_divides(
			double const & op1,
			double const & op2
		)
	{
		return primitive::succ(::filib::x87::x87div(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::downward_divides(
			double const & op1,
			double const & op2
		)
	{
		return primitive::pred(::filib::x87::x87div(op1,op2,false));
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tozero_divides(
			double const &,
			double const &
		)
	{
		std::cerr << "fp_traits<>::tozero_divides is not supported for "
			  << "primitive (non-native) rounding."  << std::endl;
		std::terminate(); return 0.0;
	}
	TEMPLATE_EMPTY
	template<bool r> inline double filib::fp_traits<double,filib::pred_succ_rounding>::tonearest_divides(
			double const & op1,
			double const & op2
		)
	{
		return ::filib::x87::x87div(op1,op2,false);
	}
