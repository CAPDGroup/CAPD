/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
			#include <fenv.h>
#ifndef __GNUG__
			#pragma STDC FENV_ACCESS ON
#endif
			/**
			 * construct rounding control conforming to
			 * ISO C 9X
			 **/

			template<bool C>
			inline void filib::rounding_control<float,C>::setup()
			{
				/**
				 * we don't want to receive SIGFPE
				 **/
				fenv_t env;
				fegetenv(&env);
				feholdexcept(&env);
				/**
				 * XXX set precision...
				 **/
			}

			/**
			 * set rounding to towards minus infinity
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::downward()
			{
				fesetround(FE_DOWNWARD);
			}

			/**
			 * set rounding to towards plus infinity
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::upward()
			{
				fesetround(FE_UPWARD);
			}

			/**
			 * set rounding to truncate (round to zero)
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::tozero()
			{
				fesetround(FE_TOWARDZERO);
			}

			/**
			 * set rounding to round to nearest (see ieee)
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::tonearest()
			{
				fesetround(FE_TONEAREST);
			}

			/**
			 * reset rounding mode, real
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::reset()
			{
				if ( C )
					filib::rounding_control<float,C>::tonearest();
			}
