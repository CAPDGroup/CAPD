/*                                                                           
**  fi_lib++  --- A fast interval library (Version 2.0)                     
**                                                                  
**  Copyright (C) 2001:                                                        
**                                                     
**  Werner Hofschuster, Walter Kraemer                               
**  Wissenschaftliches Rechnen/Softwaretechnologie (WRSWT)  
**  Universitaet Wuppertal, Germany                                           
**  Michael Lerch, German Tischler, Juergen Wolff von Gudenberg       
**  Institut fuer Informatik                                         
**  Universitaet Wuerzburg, Germany                                           
** 
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Library General Public
**  License as published by the Free Software Foundation; either
**  version 2 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Library General Public License for more details.
**
**  You should have received a copy of the GNU Library General Public
**  License along with this library; if not, write to the Free
**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/
			/**
			 * i387 fpu flags
			 **/ 

			#include <float.h>

			#if ! defined(i387_MODES)
			#define i387_MODES
			#define i387_ROUND_NEAR  0x027F
			#define i387_ROUND_DOWN  0x067F
			#define i387_ROUND_UP    0x0A7F
			#define i387_ROUND_TRUNC 0x0E7F
			#endif

			#include <exception>
			#include <stdexcept>

			/**
			 * construct rounding control
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::setup() 
			{
				/**
				 * reset
				 * float precision, round to nearest, no
				 * interupts
				 **/
				_controlfp(
					_EM_INVALID|_EM_DENORMAL|_EM_ZERODIVIDE|_EM_OVERFLOW|_EM_UNDERFLOW|_EM_INEXACT
					,MCW_EM);
				_controlfp(_PC_24,MCW_PC);
				_controlfp(RC_NEAR,MCW_RC);
			}
			/**
			 * set rounding to towards minus infinity
			 **/
			template<bool C>			
			inline void filib::rounding_control<float,C>::downward() 
			{
				_controlfp(RC_DOWN,MCW_RC);
			}
			/**
			 * set rounding to towards plus infinity
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::upward() 
			{
				_controlfp(RC_UP,MCW_RC);
			}
			/**
			 * set rounding to truncate (round to zero)
			 **/
			template<bool C>			
			inline void filib::rounding_control<float,C>::tozero() 
			{
				_controlfp(RC_CHOP,MCW_RC);
			}
			/**
			 * set rounding to round to nearest (see ieee)
			 **/
			template<bool C>
			inline void filib::rounding_control<float,C>::tonearest() 
			{
				_controlfp(RC_NEAR,MCW_RC);
			}
			/**
			 * reset rounding fake
			 **/
			template<>
			inline void filib::rounding_control<float,false>::reset()
			{
			}
			/**
			 * really reset rounding
			 **/
			template<>
			inline void filib::rounding_control<float,true>::reset()
			{
				filib::rounding_control<float,true>::tonearest();
			}
