//////////////////////////////////////////////////////////////////////////////
//   Package:          CAPD

/////////////////////////////////////////////////////////////////////////////
//
/// @file logTest.cpp
///
/// @author Daniel Wilczak
//
/////////////////////////////////////////////////////////////////////////////

// Copyright (C) CAPD group
//
// This file constitutes a part of the CAPD library,
// distributed under the terms of the GNU General Public License.
// Consult  http://capd.ii.uj.edu.pl/ for details.

//#define BOOST_TEST_MODULE logTest
#include "compare.h"
BOOST_AUTO_TEST_SUITE(logSuite)

std::vector<double> computeLogDer(MapType::VectorType & u){
  double x = u[0].leftBound();
  double y = u[1].leftBound();

  // code generated by the following Mathematica code
  // W[n_,m_]:=D[Log[1+x*(x+y^2)],{x,n},{y,m}]/(n!m!)//FullSimplify
  // Table[Table[W[m-n,n]//CForm,{n,0,m}],{m,0,5}]//Flatten

  capd::rounding::DoubleRounding::roundNearest();
  double r[] = {Log(1 + x*(x + Power(y,2))),(2*x + Power(y,2))/(1 + x*(x + Power(y,2))),(2*x*y)/(1 + x*(x + Power(y,2))),-(-2 + 2*Power(x,2) + 2*x*Power(y,2) + Power(y,4))/(2.*Power(1 + x*(x + Power(y,2)),2)),(-2*(-1 + Power(x,2))*y)/Power(1 + x*(x + Power(y,2)),2),(x*(1 + Power(x,2) - x*Power(y,2)))/Power(1 + x*(x + Power(y,2)),2),((2*x + Power(y,2))*(-3 + Power(x,2) + x*Power(y,2) + Power(y,4)))/(3.*Power(1 + x*(x + Power(y,2)),3)),(-2*y*(3*x - Power(x,3) + Power(y,2)))/Power(1 + x*(x + Power(y,2)),3),(1 - Power(x,4) + 3*x*(-1 + Power(x,2))*Power(y,2))/Power(1 + x*(x + Power(y,2)),3),(2*Power(x,2)*y*(-3 + x*(-3*x + Power(y,2))))/(3.*Power(1 + x*(x + Power(y,2)),3)),-(2 + 2*Power(x,4) + 4*Power(x,3)*Power(y,2) - 4*Power(y,4) + Power(y,8) + 4*x*Power(y,2)*(-3 + Power(y,4)) + 6*Power(x,2)*(-2 + Power(y,4)))/(4.*Power(1 + x*(x + Power(y,2)),4)),(2*y*(-1 + 6*Power(x,2) - Power(x,4) + 4*x*Power(y,2) + Power(y,4)))/Power(1 + x*(x + Power(y,2)),4),(x*(-3 + Power(x,2))*(1 + Power(x,2)) + (-3 + 12*Power(x,2) - 5*Power(x,4))*Power(y,2) + 3*x*Power(y,4))/Power(1 + x*(x + Power(y,2)),4),(4*x*(-1 + Power(x,2))*y*(1 + Power(x,2) - x*Power(y,2)))/Power(1 + x*(x + Power(y,2)),4),(Power(x,2)*(-Power(1 + Power(x,2),2) + 6*x*(1 + Power(x,2))*Power(y,2) - Power(x,2)*Power(y,4)))/(2.*Power(1 + x*(x + Power(y,2)),4)),((2*x + Power(y,2))*(5 - 10*Power(x,2) + Power(x,4) + 2*x*(-5 + Power(x,2))*Power(y,2) + (-5 + 4*Power(x,2))*Power(y,4) + 3*x*Power(y,6) + Power(y,8)))/(5.*Power(1 + x*(x + Power(y,2)),5)),(-2*y*(-(x*(5 - 10*Power(x,2) + Power(x,4))) + 2*(-1 + 5*Power(x,2))*Power(y,2) + 5*x*Power(y,4) + Power(y,6)))/Power(1 + x*(x + Power(y,2)),5),(-1 + 5*Power(x,2) + 5*Power(x,4) - Power(x,6) + x*(19 - 30*Power(x,2) + 7*Power(x,4))*Power(y,2) + 5*(1 - 3*Power(x,2))*Power(y,4) - 3*x*Power(y,6))/Power(1 + x*(x + Power(y,2)),5),(2*y*(-1 + x*(7*x + 5*Power(x,3) - 3*Power(x,5) + 5*Power(-1 + Power(x,2),2)*Power(y,2) - 2*x*Power(y,4))))/Power(1 + x*(x + Power(y,2)),5),(x*(-1 + Power(x,2))*(Power(1 + Power(x,2),2) - 10*x*(1 + Power(x,2))*Power(y,2) + 5*Power(x,2)*Power(y,4)))/Power(1 + x*(x + Power(y,2)),5),(2*Power(x,3)*y*(5*Power(1 + Power(x,2),2) - 10*x*(1 + Power(x,2))*Power(y,2) + Power(x,2)*Power(y,4)))/(5.*Power(1 + x*(x + Power(y,2)),5))};
  return std::vector<double> (r,r+sizeof(r)/sizeof(double));
}

BOOST_AUTO_TEST_CASE(xlog)
{
  std::string txt = "var:x,y;fun:log(1+x*(x+y^2));",
              msg = "Function \"" + txt + "\"  x = " ;
  MapType f(txt,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .5; x[1] = 0.75;
  std::vector<double> expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.5,0.75)");

  x[0] = -0.75; x[1] = 1.;
  expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.75,1)");

  x[0] = 0.0; x[1] = 0.0;
  expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");
}

using capd::autodiff::Node;

void _f(Node /*t*/, Node in[], int /*dimIn*/, Node out[], int /*dimOut*/, Node /*params*/[], int /*noParams*/)
{
  out[0] = log(
        1 + in[0]*(in[0] + sqr(in[1]) )
      );
}

BOOST_AUTO_TEST_CASE(xlognode)
{
  std::string msg = "Function \"log(1+x*(x-y^2))\"  x = " ;
  MapType f(_f,2,1,0,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .5; x[1] = 0.75;
  std::vector<double> expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.5,0.75)");

  x[0] = -0.75; x[1] = 1.;
  expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.75,1)");

  x[0] = 0.0; x[1] = 0.0;
  expected = computeLogDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");
}
BOOST_AUTO_TEST_SUITE_END()