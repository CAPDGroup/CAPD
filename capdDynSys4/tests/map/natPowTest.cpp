//////////////////////////////////////////////////////////////////////////////
//   Package:          CAPD

/////////////////////////////////////////////////////////////////////////////
//
/// @file natPowTest.cpp
///
/// @author Daniel Wilczak
//
/////////////////////////////////////////////////////////////////////////////

// Copyright (C) CAPD group
//
// This file constitutes a part of the CAPD library,
// distributed under the terms of the GNU General Public License.
// Consult  http://capd.ii.uj.edu.pl/ for details.

//#define BOOST_TEST_MODULE natPowTest
#include "compare.h"
BOOST_AUTO_TEST_SUITE(natPowSuite)

std::vector<double> computeQuinticDer(MapType::VectorType & u){
  double x = u[0].leftBound();
  double y = u[1].leftBound();

  // code generated by the following Mathematica code
  // W[n_,m_]:=D[(Sin[x]*Cos[y])^5,{x,n},{y,m}]/(n!m!)//FullSimplify
  // Table[Table[W[m-n,n]//CForm,{n,0,m}],{m,0,5}]//Flatten
  capd::rounding::DoubleRounding::roundNearest();
  double r[] = {Power(Cos(y),5)*Power(Sin(x),5),5*Cos(x)*Power(Cos(y),5)*Power(Sin(x),4),-5*Power(Cos(y),4)*Power(Sin(x),5)*Sin(y),(5*(3 + 5*Cos(2*x))*Power(Cos(y),5)*Power(Sin(x),3))/4.,-25*Cos(x)*Power(Cos(y),4)*Power(Sin(x),4)*Sin(y),(-5*Power(Cos(y),3)*(-3 + 5*Cos(2*y))*Power(Sin(x),5))/4.,(5*(23*Cos(x) + 25*Cos(3*x))*Power(Cos(y),5)*Power(Sin(x),2))/24.,(-25*(3 + 5*Cos(2*x))*Power(Cos(y),4)*Power(Sin(x),3)*Sin(y))/4.,(-25*Cos(x)*Power(Cos(y),3)*(-3 + 5*Cos(2*y))*Power(Sin(x),4))/4.,(5*Power(Cos(y),2)*Power(Sin(x),5)*(-23*Sin(y) + 25*Sin(3*y)))/24.,(5*Power(Cos(y),5)*(2*Sin(x) - 81*Sin(3*x) + 125*Sin(5*x)))/384.,(-25*(23*Cos(x) + 25*Cos(3*x))*Power(Cos(y),4)*Power(Sin(x),2)*Sin(y))/24.,(-25*(3 + 5*Cos(2*x))*Power(Cos(y),3)*(-3 + 5*Cos(2*y))*Power(Sin(x),3))/16.,(25*Cos(x)*Power(Cos(y),2)*Power(Sin(x),4)*(-23*Sin(y) + 25*Sin(3*y)))/24.,(5*(2*Cos(y) + 81*Cos(3*y) + 125*Cos(5*y))*Power(Sin(x),5))/384.,((2*Cos(x) - 243*Cos(3*x) + 625*Cos(5*x))*Power(Cos(y),5))/384.,(-25*Power(Cos(y),4)*(2*Sin(x) - 81*Sin(3*x) + 125*Sin(5*x))*Sin(y))/384.,(-25*(23*Cos(x) + 25*Cos(3*x))*Power(Cos(y),3)*(-3 + 5*Cos(2*y))*Power(Sin(x),2))/96.,(25*(3 + 5*Cos(2*x))*Power(Cos(y),2)*Power(Sin(x),3)*(-23*Sin(y) + 25*Sin(3*y)))/96.,(25*Cos(x)*(2*Cos(y) + 81*Cos(3*y) + 125*Cos(5*y))*Power(Sin(x),4))/384.,-(Power(Sin(x),5)*(2*Sin(y) + 243*Sin(3*y) + 625*Sin(5*y)))/384.};
  return std::vector<double> (r,r+sizeof(r)/sizeof(double));
}

BOOST_AUTO_TEST_CASE(xquintic)
{
  std::string txt = "var:x,y;fun:(sin(x)*cos(y))^5;",
              msg = "Function \"" + txt + "\"  x = " ;
  MapType f(txt,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .125; x[1] = 0.25;
  std::vector<double> expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.125,0.25)");

  MapType g("var:x,y;fun:-(-sin(x)*cos(-y))^5;",5);
  g(x,df);
  compareResults(expected, df, msg+"(0.125,0.25)");

  x[0] = -0.5; x[1] = -0.1;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.5,-0.1)");
/*
  x[0] = 0.0; x[1]= 0.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");

  x[0] = 1.0; x[1] = 0.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(1.0,0.0)");

  x[0] = 0.0; x[1] = 1.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,1.0)");

 */
}

using capd::autodiff::Node;

void _f(Node /*t*/, Node in[], int /*dimIn*/, Node out[], int /*dimOut*/, Node /*params*/[], int /*noParams*/)
{
  out[0] = (sin(in[0])*cos(in[1]))^5;
}

BOOST_AUTO_TEST_CASE(xquinticnode)
{
  std::string msg = "Function \"(sin(x)*cos(y))^5\"  (x,y) = " ;
  MapType f(_f,2,1,0,5);
  VectorType x(2);
  JetType df(1,2,5);

  x[0] = .1; x[1]=1;
  std::vector<double> expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(.1,1)");

  x[0] = -0.143; x[1] = 0.6;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(-0.143,0.6)");

/*
  x[0] = 0.0; x[1] = 0.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,0.0)");

  x[0] = 1.0; x[1] = 0.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(1.0,0.0)");

  x[0] = 0.0; x[1] = 1.0;
  expected = computeQuinticDer(x);
  f(x,df);
  compareResults(expected, df, msg+"(0.0,1.0)");
*/
}
BOOST_AUTO_TEST_SUITE_END()