#ifndef CAPD_DYNSYS_BASIC_SOLVER_MASK_TEST_DATA_H
#define CAPD_DYNSYS_BASIC_SOLVER_MASK_TEST_DATA_H

#include <boost/test/unit_test.hpp>
#include "capd/capdlib.h"
#include "capd/vectalg/Matrix.hpp"
#include "capd/diffAlgebra/Jet.hpp"
#include "capd/diffAlgebra/Hessian.hpp"

using namespace capd;
typedef capd::vectalg::Matrix<int,0,0> BMatrix;
typedef capd::diffAlgebra::Hessian<bool,0,0> BHessian;
typedef capd::diffAlgebra::Jet<BMatrix,0> BJet;

const double tol = 1e-13;
// this is exported from Mathematica - exact solution
const double value[] = {-2.5316314956714900, 1.8949517065413926, 3.4903429574618414};

const double derivative[] = {
    -0.15841556424007908, -2.3701983992616307, 0,
    0.31607674543771402, -1.5834012593583489, 0,
    0.87258573936546036, 2.6177572180963811, 3.4903429574618414};

const double hessian[] = {
    -0.39500163391683646, -0.31588814967710271, 0,  0.23866062304348090, 0, 0, -0.29684058718953776,
    -0.35605782801895652, 0, -1.5611475689403926, 0, 0, 0.54536608710341272, 0.65443930452409527,
    0.87258573936546036, 1.4179518264688731, 2.6177572180963811, 0};

const double c3[] = {
    -0.044428646935448214, 0.21287091444760703, 0, 0.18297940039198052,
    0, 0, 0.59806587347974383, 0, 0, 0, -0.042864924531560857,
    -0.42472812668192761, 0, -0.16782147313347984, 0, 0,
    -0.20695387479197153, 0, 0, 0, 0.11816265220573942,
    0.40902456532755954, 0.54536608710341272, 0.35448795661721827,
    0.65443930452409527, 0, 0.57263439145858330, 1.4179518264688731, 0, 0};

const double c4[] = {0.019385967054582082, 0.062625614738937477, 0, 0.24455695887102799,
    0, 0, 0.088902478271876140, 0, 0, 0, 0.16416017749989503, 0, 0, 0, 0,
    -0.035083622888334415, -0.040703994913533721, 0,
    0.026791566449043028, 0, 0, 0.038378056699432450, 0, 0, 0,
    0.13634464261114032, 0, 0, 0, 0, 0.041470546206822008,
    0.088621989154304567, 0.11816265220573942, 0.22155497288576143,
    0.40902456532755954, 0, 0.14315859786464583, 0.35448795661721827, 0,
    0, 0.19599093755278890, 0.57263439145858330, 0, 0, 0};


const double c5[] = {0.0041563948134421252, 0.034803930351018676, 0,
    0.023390554801000430, 0, 0, 0.034964278720380194, 0, 0, 0,
    0.00097020584133128179, 0, 0, 0, 0, -0.0089063093630541244, 0, 0, 0,
    0, 0, -0.0029503766309958565, 0.015834312503170186, 0,
    0.029359870162769891, 0, 0, 0.090516545165687523, 0, 0, 0,
    0.035051577929882012, 0, 0, 0, 0, 0.061538593597794712, 0, 0, 0, 0,
    0, 0.0079816599206280724, 0.031102909655116508, 0.041470546206822008,
    0.048003577458581637, 0.088621989154304567, 0, 0.089474123665403651,
    0.22155497288576143, 0, 0, 0.048997734388197225, 0.14315859786464583,
    0, 0, 0, 0.058030360205847516, 0.19599093755278890, 0, 0, 0, 0};


const double c6[] =  {0.0019094844343481466, 0.0025171660982330666, 0,
    -0.0020379782822336464, 0, 0, -0.0064975747688835331, 0, 0, 0,
    -0.020675969261991292, 0, 0, 0, 0, -0.0089294578491597582, 0, 0, 0,
    0, 0, -0.014559460217323789, 0, 0, 0, 0, 0, 0,
    0.00093020114033524036, 0.0050657028363276322, 0,
    0.018658924707740599, 0, 0, 0.013028421936501985, 0, 0, 0,
    0.025023343729418203, 0, 0, 0, 0, 0.0048900781120480696, 0, 0, 0, 0,
    0, 0.0068025838171620187, 0, 0, 0, 0, 0, 0, 0.0020605085886437535,
    0.0059862449404710543, 0.0079816599206280724, 0.016847409396521441,
    0.031102909655116508, 0, 0.019386060127504125, 0.048003577458581637,
    0, 0, 0.030623583992623271, 0.089474123665403651, 0, 0, 0,
    0.014507590051461879, 0.048997734388197225, 0, 0, 0, 0,
    0.015420084090430480, 0.058030360205847509, 0, 0, 0, 0, 0};

template<class E, class O>
void check(O b, O e, E r){
  for(;b!=e;++b,++r)
    BOOST_CHECK_SMALL(*b-*r,tol);
}

template<class M, class E, class O>
void check(M m, O b, O e, E r){
  for(;b!=e;++m,++b,++r){
    if(*m){
      BOOST_CHECK_SMALL(*b-*r,tol);
    } else {
      BOOST_CHECK_EQUAL(*b,0.);
    }
  }
}

// compare numerical solution to exact solution - C^0 part
inline void check(const DVector& x){
  check(x.begin(),x.end(),value);
}

// compare numerical solution to exact solution - C^1 part
inline void check(const BMatrix& mask, const DMatrix& der){
  check(mask.begin(),der.begin(),der.end(),derivative);
}

// compare numerical solution to exact solution - C^2 part
inline void check(const BHessian& mask, const DHessian& h){
  check(mask.begin(),h.begin(),h.end(),hessian);
}


#endif /* CAPD_DYNSYS_BASIC_SOLVER_MASK_TEST_DATA_H */

